/**
  ****************************************************************************
  * @file    ap_graph_frame_cpp.cpp
  * @author  Ing. Petr Simek
  * @version V1.0
  * @date    17.07.2018
  * @brief   Graph window component creator
  ****************************************************************************
  * @attention
  * <h2><center>&copy; COPYRIGHT PORTTRONIC</center></h2>
  ****************************************************************************
  */

/**
  ****************************************************************************
  * Library
  ****************************************************************************
  */

#include "ap_graph_frame_h.h"

//(*InternalHeaders(graph_frame)
#include <wx/intl.h>
#include <wx/string.h>
//*)

/**
  * @defgroup Application
  * @brief Application layer
  * @{
  */

/**
  * @defgroup Graph
  * @brief Graph window
  * @{
  */

/**
  ****************************************************************************
  * Define
  ****************************************************************************
  */



/**
  ****************************************************************************
  * Local variable
  ****************************************************************************
  */

// application icon
#include "icon/lp_signal_value_xpm.xpm"
//(*IdInit(graph_frame)
const long graph_frame::l_id_graph_wxpanel = wxNewId();
const long graph_frame::l_id_update_wxtimer = wxNewId();
//*)
#include <wx/imaglist.h>

/**
  ****************************************************************************
  * Function
  ****************************************************************************
  */

BEGIN_EVENT_TABLE(graph_frame,wxFrame)
    //(*EventTable(graph_frame)
    //*)
END_EVENT_TABLE()

/** @brief Constructor
 *
 * @param  parent : Pointer on window generated by OS for application
 * @param  id : Window identification
 * @return void
 *
 */

graph_frame::graph_frame(wxWindow* parent, wxWindowID id)
{
wxImageList *icon_wximagelist = new wxImageList(16, 16, true, 1);

    //(*Initialize(graph_frame)
    Create(parent, wxID_ANY, _("Graph"), wxDefaultPosition, wxDefaultSize, wxDEFAULT_FRAME_STYLE, _T("wxID_ANY"));
    SetClientSize(wxSize(815,440));
    lp_graph_wxpanel = new wxPanel(this, l_id_graph_wxpanel, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL, _T("l_id_graph_wxpanel"));
    lp_graph_wxboxsizer = new wxBoxSizer(wxHORIZONTAL);
    lp_graph_wxpanel->SetSizer(lp_graph_wxboxsizer);
    lp_graph_wxboxsizer->Fit(lp_graph_wxpanel);
    lp_graph_wxboxsizer->SetSizeHints(lp_graph_wxpanel);
    lp_update_wxtimer.SetOwner(this, l_id_update_wxtimer);
    lp_update_wxtimer.Start(10, false);

    Connect(l_id_update_wxtimer,wxEVT_TIMER,(wxObjectEventFunction)&graph_frame::on_update_wxtimer_trigger);
    //*)
    // Set frame icon
    icon_wximagelist->Add(wxIcon( lp_signal_value_si8 ), wxColor(0xff, 0xff, 0xff));
    SetIcon(icon_wximagelist->GetIcon(0));
    delete icon_wximagelist;
    return;
}

/** @brief Destructor
 *
 * @param  void
 * @return void
 *
 */

graph_frame::~graph_frame()
{
uint32_t f_graph_cnt_ui32 = 0;
    //(*Destroy(graph_frame)
    //*)
    this->lp_update_wxtimer.Stop();
    wxMilliSleep(200);
    while (f_graph_cnt_ui32 < this->lv_data_graph_buffer.size())
    {
        delete this->lv_data_graph_buffer[f_graph_cnt_ui32].p_graph_data_plot;
        f_graph_cnt_ui32++;
    }
    this->lv_data_graph_buffer.clear();
    this->GetParent()->Close();
}

uint32_t graph_frame::add_graph (double graph_range_d, double buffer_length_d, double time_step_d)
{
graph_buffer_t data_graph_buffer;
uint32_t graph_num_ui32 = this->lv_data_graph_buffer.size();

    data_graph_buffer.graph_range_d = graph_range_d;
    data_graph_buffer.buffer_length_d = buffer_length_d;
    data_graph_buffer.time_step_d = time_step_d;
    data_graph_buffer.p_graph_data_plot = NULL;
    this->lv_data_graph_buffer.push_back(data_graph_buffer);
    //p_graph_data_plot = new data_plot(this->lp_graph_wxpanel, draph_range_d, buffer_length_d, time_step_d);
    //this->lp_graph_data_plot.push_back(p_graph_data_plot);
    return graph_num_ui32;
}

uint32_t graph_frame::insert_signal (uint32_t graph_ui32, wxString signal_label_str, uint32_t color_ui32, uint32_t width_ui32, uint32_t style_ui32)
{
uint32_t signal_ui32 = 0;
wxPen signal_style_pen;

    if (graph_ui32 < this->lv_data_graph_buffer.size())
    {
        signal_style_pen.SetColour(((unsigned char)color_ui32), ((unsigned char)(color_ui32 >> 8)), ((unsigned char)(color_ui32 >> 16)));
        signal_style_pen.SetWidth(width_ui32);
        signal_style_pen.SetStyle((style_ui32 + 100));
        if(this->lv_data_graph_buffer[graph_ui32].p_graph_data_plot)
        {
            this->lv_data_graph_buffer[graph_ui32].p_graph_data_plot->insert_signal(signal_label_str, signal_style_pen);
        }
    }
    return signal_ui32;
}

bool graph_frame::set_graph_data (uint32_t graph_ui32, vector<double>& pv_data_d)
{
bool status_b = false;
uint32_t signal_cnt_ui32;

    if (graph_ui32 < this->lv_data_graph_buffer.size())
    {
        if(this->lv_data_graph_buffer[graph_ui32].p_graph_data_plot)
        {
            for (signal_cnt_ui32 = 0 ; signal_cnt_ui32 < this->lv_data_graph_buffer[graph_ui32].p_graph_data_plot->get_signal() ; signal_cnt_ui32++)
            {
                this->lv_data_graph_buffer[graph_ui32].p_graph_data_plot->insert_data(signal_cnt_ui32, pv_data_d[signal_cnt_ui32]);
            }
            this->lv_data_graph_buffer[graph_ui32].p_graph_data_plot->time_increment();
        }
        status_b = true;
    }
    return status_b;
}

void graph_frame::on_update_wxtimer_trigger(wxTimerEvent& event)
{
static uint32_t f_graph_cnt_ui32 = 0;

    while (f_graph_cnt_ui32 < this->lv_data_graph_buffer.size())
    {
        this->lv_data_graph_buffer[f_graph_cnt_ui32].p_graph_data_plot = new data_plot(this->lp_graph_wxpanel, this->lv_data_graph_buffer[f_graph_cnt_ui32].graph_range_d, this->lv_data_graph_buffer[f_graph_cnt_ui32].buffer_length_d, this->lv_data_graph_buffer[f_graph_cnt_ui32].time_step_d);
        // Add in to sizer
        this->lp_graph_wxboxsizer->Add(this->lv_data_graph_buffer[f_graph_cnt_ui32].p_graph_data_plot, 1, wxEXPAND, 5);
        //this->lp_graph_wxpanel->SetSizer(this->lp_graph_wxboxsizer);
        this->lp_graph_wxboxsizer->Fit(this->lp_graph_wxpanel);
        this->lp_graph_wxboxsizer->SetSizeHints(this->lp_graph_wxpanel);
        this->lp_graph_wxboxsizer->Layout();

        f_graph_cnt_ui32++;
    }
    return;
}

/**
* @}
*/

/**
* @}
*/

/*****************************************************END OF FILE************/
