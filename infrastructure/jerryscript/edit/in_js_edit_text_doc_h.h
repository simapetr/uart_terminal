/**
  ****************************************************************************
  * @file    in_js_edit_text_doc_h.h
  * @author  file2str
  * @brief   File variable wxString l_js_doc_file_str
  ****************************************************************************
  */

/**
  ****************************************************************************
  * Variable
  ****************************************************************************
  */

// File string
wxString l_js_doc_file_str = wxT(
"/**\n"
"  ****************************************************************************\n"
"  * @file    jerryscript_h.h\n"
"  * @author  Ing. Petr Simek\n"
"  * @version V1.0\n"
"  * @date    05.12.2019\n"
"  * @brief   JerryScript class documentation\n"
"  ****************************************************************************\n"
"  * @attention\n"
"  * <h2><center>&copy; COPYRIGHT PORTTRONIC</center></h2>\n"
"  ****************************************************************************\n"
"  */\n"
"\n"
"/**\n"
"  * @mainpage JerryScript documentation\n"
"  *\n"
"  * <h1><b>Introduction</b></h1>\n"
"  *\n"
"  * Documentation user interface for JerryScript interpreter <br>\n"
"  * The documented interface is implemented here :<br>\n"
"  * https://github.com/simapetr/uart_terminal/tree/master/infrastructure/jerryscript\n"
"  *\n"
"  * <h2>Supported function:</h2>\n"
"  *\n"
"  * - Control main frame GUI\n"
"  * - Read system time\n"
"  * - Event timer\n"
"  * - Read/Write file\n"
"  * - UART communication\n"
"  * - Create AUI panel and use selected wxWidget3.0 component\n"
"  *\n"
"  * <h2>The documentation is based on:</h2>\n"
"  *\n"
"  * - Jerry script ECMAScript 5.1 (https://github.com/jerryscript-project/jerryscript)\n"
"  * - UART terminal (https://github.com/simapetr/uart_terminal)\n"
"  *\n"
"  * <h2>Supported platforms:</h2>\n"
"  *\n"
"  * - Windows 7, 8 and 10.\n"
"  *\n"
"  * <b>Copyright Notice</b>\n"
"  *\n"
"  * Copyright (C) PORTTRONIC All rights reserved.\n"
"  *\n"
"  */\n"
"\n"
"/**\n"
"  * @defgroup System_object\n"
"  * @brief Basic system object\n"
"  * @{\n"
"  */\n"
"\n"
"/**\n"
"  * @class main_frame\n"
"  * @brief System Main frame GUI control\n"
"  *\n"
"  */\n"
"\n"
"class main_frame\n"
"{\n"
"\n"
"    public:\n"
"\n"
"        /** @brief Set show main frame\n"
"         *\n"
"         * @code\n"
"         * main_frame.gui(false);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] show_b : Show frame status\n"
"         *   @arg false : Hide\n"
"         *   @arg true : Show\n"
"         * @return\n"
"         *\n"
"         */\n"
"\n"
"        gui(show_b);\n"
"\n"
"        /** @brief Set show Rx data in main frame console\n"
"         *\n"
"         * @code\n"
"         * main_frame.console_rx_enable(false);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] enable_b : Show Rx data in console\n"
"         *   @arg false : Hide\n"
"         *   @arg true : Show\n"
"         * @return\n"
"         *\n"
"         */\n"
"\n"
"        console_rx_enable(enable_b);\n"
"\n"
"        /** @brief Get console enable state\n"
"         *\n"
"         * @code\n"
"         * var state_var;\n"
"         * state_var = main_frame.is_console_rx_enable();\n"
"         * @endcode\n"
"         *\n"
"         * @param\n"
"         * @return Console enable state\n"
"         *   @arg false : Disable\n"
"         *   @arg true : Enable\n"
"         *\n"
"         */\n"
"\n"
"        is_console_rx_enable();\n"
"\n"
"        /** @brief Print text sting in to console\n"
"         *\n"
"         * @code\n"
"         * main_frame.printf(\"Hello world!\");\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] text_str : Print text\n"
"         * @return\n"
"         *\n"
"         */\n"
"\n"
"        printf(text_str);\n"
"\n"
"        /** @brief Print status text sting in to main frame status\n"
"         *\n"
"         * @code\n"
"         * main_frame.status(\"Hello world!\");\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] text_str : Print text\n"
"         * @return\n"
"         *\n"
"         */\n"
"\n"
"        status(text_str);\n"
"\n"
"        /** @brief Clear main frame console text\n"
"         *\n"
"         * @code\n"
"         * main_frame.clear();\n"
"         * @endcode\n"
"         *\n"
"         * @param\n"
"         * @return\n"
"         *\n"
"         */\n"
"\n"
"        clear();\n"
"\n"
"        /** @brief Open communication and GUI component in main frame\n"
"         *\n"
"         * @code\n"
"         * main_frame.open();\n"
"         * @endcode\n"
"         *\n"
"         * @param\n"
"         * @return\n"
"         *\n"
"         */\n"
"\n"
"        open();\n"
"\n"
"        /** @brief Open and set port communication and GUI component in main frame\n"
"         *\n"
"         * @code\n"
"         * main_frame.open(1,57600,0,0,8,4);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] bite_timeout_d : Packet timeout\n"
"         * @param [IN] baudrate_d : Communication speed\n"
"         * @param [IN] stop_bits_d : Number of character stop bits\n"
"         *   @arg 0 : 1\n"
"         *   @arg 1 : 1,5\n"
"         *   @arg 2 : 2\n"
"         * @param [IN] parity_d : Character parity type\n"
"         *   @arg 0 : None\n"
"         *   @arg 1 : Odd\n"
"         *   @arg 2 : Even\n"
"         *   @arg 3 : Char\n"
"         *   @arg 4 : Space\n"
"         * @param [IN] bit_length_d : Character bit length\n"
"         * @param [IN] port_num_d : Port number\n"
"         *   @arg 0 : Get number from main frame port setting\n"
"         * @return\n"
"         *\n"
"         */\n"
"\n"
"        open(bite_timeout_d, baudrate_d, stop_bits_d, parity_d, bit_length_d, port_num_d);\n"
"\n"
"        /** @brief Close communication in main frame\n"
"         *\n"
"         * @code\n"
"         * main_frame.close();\n"
"         * @endcode\n"
"         *\n"
"         * @param\n"
"         * @return\n"
"         *\n"
"         */\n"
"\n"
"        close();\n"
"\n"
"        /** @brief Get communication open status\n"
"         *\n"
"         * @code\n"
"         * var state_var;\n"
"         * state_var = main_frame.get_open_status();\n"
"         * @endcode\n"
"         *\n"
"         * @param\n"
"         * @return communication status\n"
"         *   @arg 0 : Open error\n"
"         *   @arg 1 : Open\n"
"         *   @arg 2 : Handle error\n"
"         *   @arg 3 : Write configuration error\n"
"         *   @arg 4 : Write timeout error\n"
"         *   @arg 5 : Close error\n"
"         *   @arg 6 : Close\n"
"         *   @arg 7 : Opened\n"
"         *\n"
"         */\n"
"\n"
"        get_open_status();\n"
"\n"
"        /** @brief Show input dialog with user info text and return user input data\n"
"         *\n"
"         * @code\n"
"         * var text_str;\n"
"         * text_str = main_frame.get_data(\"Get input text:\");\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] info_str : User text\n"
"         * @return User input text string\n"
"         *\n"
"         */\n"
"\n"
"        get_data(info_str)\n"
"\n"
"        /** @brief Set status progress in progress dialog\n"
"         *\n"
"         * @code\n"
"         * // Show 50% progress\n"
"         * main_frame.set_progress(\"User process progress:\", 50);\n"
"         * // Close dialog\n"
"         * main_frame.set_progress(\"User process progress:\", 101);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] text_str : User text\n"
"         * @param [IN] progress_d : actual progress\n"
"         *   @arg 0 - 100 : Show progress value\n"
"         *   @arg >100 : Close progress dialog\n"
"         * @return\n"
"         *\n"
"         */\n"
"\n"
"        set_progress(text_str, progress_d);\n"
"\n"
"        /** @brief Register event on send button click (in event function is parameter array with console input data)\n"
"         *\n"
"         * @code\n"
"         * main_frame.reg_event(\"on_send_click\");\n"
"         * function on_send_click(data_array)\n"
"         * {\n"
"         * }\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] event_fct_str : Print text\n"
"         * @return registration status\n"
"         *   @arg 0 : Registration error\n"
"         *   @arg 1 : Registered\n"
"         *\n"
"         */\n"
"\n"
"        reg_event(event_fct_str);\n"
"\n"
"        /** @brief Set show main frame\n"
"         *\n"
"         * @code\n"
"         * main_frame.hide(true);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] enable_b : Show main frame\n"
"         *   @arg false : Show\n"
"         *   @arg true : Hide\n"
"         * @return\n"
"         *\n"
"         */\n"
"\n"
"        hide(enable_b);\n"
"\n"
"};\n"
"\n"
"/**\n"
"  * @class uart\n"
"  * @brief System UART port driver\n"
"  *\n"
"  */\n"
"\n"
"class uart\n"
"{\n"
"\n"
"    public:\n"
"\n"
"        /** @brief Open and set port communication\n"
"         *\n"
"         * @code\n"
"         * uart.open(1,57600,0,0,8,4);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] bite_timeout_d : Packet timeout\n"
"         * @param [IN] baudrate_d : Communication speed\n"
"         * @param [IN] stop_bits_d : Number of character stop bits\n"
"         *   @arg 0 : 1\n"
"         *   @arg 1 : 1,5\n"
"         *   @arg 2 : 2\n"
"         * @param [IN] parity_d : Character parity type\n"
"         *   @arg 0 : None\n"
"         *   @arg 1 : Odd\n"
"         *   @arg 2 : Even\n"
"         *   @arg 3 : Char\n"
"         *   @arg 4 : Space\n"
"         * @param [IN] bit_length_d : Character bit length\n"
"         * @param [IN] port_num_d : Port number\n"
"         * @return Open status (See uart_status_t)\n"
"         *\n"
"         */\n"
"\n"
"        open(bite_timeout_d, baudrate_d, stop_bits_d, parity_d, bit_length_d, port_num_d);\n"
"\n"
"        /** @brief Close port communication\n"
"         *\n"
"         * @code\n"
"         * uart.close();\n"
"         * @endcode\n"
"         *\n"
"         * @param\n"
"         * @return\n"
"         *\n"
"         */\n"
"\n"
"        close();\n"
"\n"
"        /** @brief Register receive event\n"
"         *\n"
"         * @code\n"
"         * uart.open(1,57600,0,0,8,4);\n"
"         * uart.reg_event(\"rx_data\");\n"
"         * function rx_data ( event_var, data_var )\n"
"         * {\n"
"         *     // Check if data event\n"
"         *     if (event_var & 0x1)\n"
"         *     {\n"
"         *         if (data_var.length)\n"
"         *         {\n"
"         *             // Process data\n"
"         *         }\n"
"         *     }\n"
"         * }\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] event_name_str : Event function name\n"
"         * @return Register status\n"
"         *\n"
"         */\n"
"\n"
"        reg_event(event_name_str);\n"
"\n"
"        /** @brief Write character\n"
"         *\n"
"         * @code\n"
"         * uart.open(1,57600,0,0,8,4);\n"
"         * uart.write(0x20);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] char_d : Character\n"
"         * @return Send status\n"
"         *\n"
"         */\n"
"\n"
"        write(char_d);\n"
"\n"
"        /** @brief Write data array\n"
"         *\n"
"         * @code\n"
"         * var data_array;\n"
"         * uart.open(1,57600,0,0,8,4);\n"
"         * data_array.push(0x01);\n"
"         * data_array.push(0x02);\n"
"         * data_array.push(0x03);\n"
"         * uart.write(data_array);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] v_data_d : Data array\n"
"         * @return Send status\n"
"         *\n"
"         */\n"
"\n"
"        write(v_data_d);\n"
"\n"
"        /** @brief Write ASCI string\n"
"         *\n"
"         * @code\n"
"         * var data_str;\n"
"         * uart.open(1,57600,0,0,8,4);\n"
"         * data_str = \"Hello World!\";\n"
"         * uart.write(data_str);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] char_str : Text string\n"
"         * @return Send status\n"
"         *\n"
"         */\n"
"\n"
"        write(char_str);\n"
"\n"
"        /** @brief Write data array user size\n"
"         *\n"
"         * @code\n"
"         * var data_array;\n"
"         * uart.open(1,57600,0,0,8,4);\n"
"         * data_array.push(0x01);\n"
"         * data_array.push(0x02);\n"
"         * data_array.push(0x03);\n"
"         * // Send only 2 char from array\n"
"         * uart.write(data_array, 2);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] v_data_d : Data array\n"
"         * @param [IN] length_d : Number of send data\n"
"         * @return Send status\n"
"         *\n"
"         */\n"
"\n"
"        write(v_data_d, length_d);\n"
"\n"
"        /** @brief Get port control line state\n"
"         *\n"
"         * @code\n"
"         * var data_bool;\n"
"         * uart.open(1,57600,0,0,8,4);\n"
"         * data_bool = uart.get_ctrl(\"CTS\");\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] name_str : Control line name\n"
"         *   @arg RX : Rx line logic state\n"
"         *   @arg CTS : Clear to send\n"
"         *   @arg DSR : Data set ready\n"
"         *   @arg RING : Ring indication\n"
"         *   @arg RLSD : Receive line signal detect\n"
"         * @return Control line logic state\n"
"         *\n"
"         */\n"
"\n"
"        get_ctrl(name_str);\n"
"\n"
"        /** @brief Set port control line state\n"
"         *\n"
"         * @code\n"
"         * uart.open(1,57600,0,0,8,4);\n"
"         * uart.set_ctrl(\"DTR\");\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] name_str : Control line name\n"
"         *   @arg DTR : Data terminal ready\n"
"         *   @arg RTS : Request to send\n"
"         *   @arg BREAK : Tx line break\n"
"         *   @arg XOFF : Transmit OFF\n"
"         *   @arg XON : Transmit ON\n"
"         * @param [IN] state_b : New logic state\n"
"         * @return\n"
"         *\n"
"         */\n"
"\n"
"        set_ctrl(name_str, state_b);\n"
"\n"
"};\n"
"\n"
"/**\n"
"  * @class time\n"
"  * @brief System time interface\n"
"  *\n"
"  */\n"
"\n"
"class time\n"
"{\n"
"\n"
"    public:\n"
"\n"
"        /** @brief Get actual time in s\n"
"         *\n"
"         * @code\n"
"         * var time_var;\n"
"         * time_var = time.now();\n"
"         * @endcode\n"
"         *\n"
"         * @param\n"
"         * @return Number of s from (ISO 8601: 1970-01-01T00:00:00Z)\n"
"         *\n"
"         */\n"
"\n"
"        now();\n"
"\n"
"        /** @brief Get actual time in ms\n"
"         *\n"
"         * @code\n"
"         * var time_var;\n"
"         * time_var = time.now_ms();\n"
"         * @endcode\n"
"         *\n"
"         * @param\n"
"         * @return Number of ms from (ISO 8601: 1970-01-01T00:00:00Z)\n"
"         *\n"
"         */\n"
"\n"
"        now_ms();\n"
"\n"
"        /** @brief Get actual UTC time string\n"
"         *\n"
"         * @code\n"
"         * var time_str;\n"
"         * time_str = time.str(time.now());\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] time_d : time ISO 8601\n"
"         * @return String time and date (YYYY-MM-DD HH:MM:SS)\n"
"         *\n"
"         */\n"
"\n"
"        str(time_d);\n"
"\n"
"        /** @brief Get actual system time string\n"
"         *\n"
"         * @code\n"
"         * var time_str;\n"
"         * time_str = time.local_str(time.now());\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] time_d : time ISO 8601\n"
"         * @return String time and date (YYYY-MM-DD HH:MM:SS)\n"
"         *\n"
"         */\n"
"\n"
"        local_str(time_d);\n"
"\n"
"};\n"
"\n"
"/**\n"
"  * @class timer\n"
"  * @brief Event timer\n"
"  *\n"
"  */\n"
"\n"
"class timer\n"
"{\n"
"\n"
"    public:\n"
"\n"
"        /** @brief Add new timer event\n"
"         *\n"
"         * @code\n"
"         * var system_timer;\n"
"         * system_timer = timer.add(\"timer_event\", 10, true, false);\n"
"         * function timer_event()\n"
"         * {\n"
"         * }\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] event_str : Event function name\n"
"         * @param [IN] period_d : Time period\n"
"         * @param [IN] start_b :Start timer after add\n"
"         * @param [IN] one_shot_b : Call event only one after overflow\n"
"         * @return Timer ID\n"
"         *\n"
"         */\n"
"\n"
"        add(event_str, period_d, start_b, one_shot_b);\n"
"\n"
"        /** @brief Set timer period\n"
"         *\n"
"         * @code\n"
"         * var system_timer;\n"
"         * system_timer = timer.add(\"timer_event\", 10, true, false);\n"
"         * timer.set(system_timer, 200);\n"
"         * function timer_event()\n"
"         * {\n"
"         * }\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] timer_index_d : Timer index\n"
"         * @param [IN] period_d : Time period\n"
"         * @return\n"
"         *\n"
"         */\n"
"\n"
"        set(timer_index_d, period_d);\n"
"\n"
"        /** @brief Start timer\n"
"         *\n"
"         * @code\n"
"         * var system_timer;\n"
"         * system_timer = timer.add(\"timer_event\", 10);\n"
"         * timer.start(system_timer);\n"
"         * function timer_event()\n"
"         * {\n"
"         * }\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] timer_index_d : Timer index\n"
"         * @return\n"
"         *\n"
"         */\n"
"\n"
"        start(timer_index_d);\n"
"\n"
"        /** @brief Stop timer\n"
"         *\n"
"         * @code\n"
"         * var system_timer;\n"
"         * system_timer = timer.add(\"timer_event\", 10, true, false);\n"
"         * timer.stop(system_timer);\n"
"         * function timer_event()\n"
"         * {\n"
"         * }\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] timer_index_d : Timer index\n"
"         * @return\n"
"         *\n"
"         */\n"
"\n"
"        stop(timer_index_d);\n"
"\n"
"        /** @brief Reset delay time\n"
"         *\n"
"         * @code\n"
"         * var system_timer;\n"
"         * system_timer = timer.add(\"timer_event\", 10, true, true);\n"
"         * function timer_event()\n"
"         * {\n"
"         *     timer.reset(system_timer);\n"
"         * }\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] timer_index_d : Timer index\n"
"         * @return\n"
"         *\n"
"         */\n"
"\n"
"        reset(timer_index_d);\n"
"\n"
"};\n"
"\n"
"/**\n"
"  * @class file\n"
"  * @brief System file read/write\n"
"  *\n"
"  */\n"
"\n"
"class file\n"
"{\n"
"\n"
"    public:\n"
"\n"
"        /** @brief Read string from text file\n"
"         *\n"
"         * @code\n"
"         * var state_str;\n"
"         * state_str = file.read(\"file.txt\");\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] path_str : File path\n"
"         * @return Read string\n"
"         *\n"
"         */\n"
"\n"
"        read(path_str);\n"
"\n"
"        /** @brief Read array from binary file\n"
"         *\n"
"         * @code\n"
"         * var data_array;\n"
"         * data_array = file.read(\"file.bin\");\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] path_str : File path\n"
"         * @return Read data array\n"
"         *\n"
"         */\n"
"\n"
"        read_b(path_str);\n"
"\n"
"        /** @brief Write binary array\n"
"         *\n"
"         * @code\n"
"         * var state_b;\n"
"         * var data_array;\n"
"         * data_array.push(0x01);\n"
"         * data_array.push(0x02);\n"
"         * data_array.push(0x03);\n"
"         * state_b = file.write(\"file.bin\", data_array);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] path_str : File path\n"
"         * @param [IN] v_data_d : Write data buffer\n"
"         * @return Write status\n"
"         *   @arg 0 : Write failed\n"
"         *   @arg 1 : Write success\n"
"         *\n"
"         */\n"
"\n"
"        write(path_str, v_data_d);\n"
"\n"
"        /** @brief Write text string\n"
"         *\n"
"         * @code\n"
"         * var state_b;\n"
"         * state_b = file.write(\"file.txt\", \"Hello world!\");\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] path_str : File path\n"
"         * @param [IN] data_str : Write data text string\n"
"         * @return Write status\n"
"         *   @arg 0 : Write failed\n"
"         *   @arg 1 : Write success\n"
"         *\n"
"         */\n"
"\n"
"        write(path_str, data_str);\n"
"\n"
"        /** @brief Append binary array\n"
"         *\n"
"         * @code\n"
"         * var state_b;\n"
"         * var data_array;\n"
"         * data_array.push(0x01);\n"
"         * data_array.push(0x02);\n"
"         * data_array.push(0x03);\n"
"         * state_b = file.append(\"file.bin\", data_array);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] path_str : File path\n"
"         * @param [IN] v_data_d : Write data buffer\n"
"         * @return Write status\n"
"         *   @arg 0 : Write failed\n"
"         *   @arg 1 : Write success\n"
"         *\n"
"         */\n"
"\n"
"        append(path_str, v_data_d);\n"
"\n"
"        /** @brief Append text string\n"
"         *\n"
"         * @code\n"
"         * var state_b;\n"
"         * state_b = file.append(\"file.txt\", \"Hello world!\");\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] path_str : File path\n"
"         * @param [IN] data_str : Write data text string\n"
"         * @return Write status\n"
"         *   @arg 0 : Write failed\n"
"         *   @arg 1 : Write success\n"
"         *\n"
"         */\n"
"\n"
"        append(path_str, data_str);\n"
"\n"
"};\n"
"\n"
"/**\n"
"  * @class project\n"
"  * @brief Script project file\n"
"  *\n"
"  */\n"
"\n"
"class project\n"
"{\n"
"\n"
"    public:\n"
"\n"
"        /** @brief Read string from project file\n"
"         *\n"
"         * @code\n"
"         * var data_str;\n"
"         * data_str = file.read(\"JS_DATA/user_text\", \"Hello World!\");\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] path_str : Variable path\n"
"         * @param [IN] default_str : Default data\n"
"         * @return Read string\n"
"         *\n"
"         */\n"
"\n"
"        read(path_str, default_str);\n"
"\n"
"        /** @brief Read value from project file\n"
"         *\n"
"         * @code\n"
"         * var data_var;\n"
"         * data_var = file.read(\"JS_DATA/user_var\", 100);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] path_str : Variable path\n"
"         * @param [IN] default_d : Default data\n"
"         * @return Read string\n"
"         *\n"
"         */\n"
"\n"
"        read(path_str, default_d);\n"
"\n"
"        /** @brief Write string to project file\n"
"         *\n"
"         * @code\n"
"         * file.write(\"JS_DATA/user_text\", \"Hello World!\");\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] path_str : Variable path\n"
"         * @param [IN] data_str : Data string\n"
"         * @return\n"
"         *\n"
"         */\n"
"\n"
"        write(path_str, data_str);\n"
"\n"
"        /** @brief Write value to project file\n"
"         *\n"
"         * @code\n"
"         * file.write(\"JS_DATA/user_var\", 100);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] path_str : Variable path\n"
"         * @param [IN] data_d : Data variable\n"
"         * @return void\n"
"         *\n"
"         */\n"
"\n"
"        write(path_str, data_d);\n"
"\n"
"};\n"
"\n"
"/**\n"
"* @}\n"
"*/\n"
"\n"
"/**\n"
"  * @defgroup GUI\n"
"  * @brief Main GUI object\n"
"  * @{\n"
"  */\n"
"\n"
"/**\n"
"  * @defgroup GUI_object\n"
"  * @brief wxWidget GUI object\n"
"  * @{\n"
"  */\n"
"\n"
"/**\n"
"  * @class panel\n"
"  * @brief wxAui panel class\n"
"  *\n"
"  */\n"
"\n"
"class panel\n"
"{\n"
"\n"
"    public:\n"
"\n"
"        /** @brief Add new AUI panel\n"
"         *\n"
"         * @code\n"
"         * var test_panel;\n"
"         * test_panel = gui.panel.add(\"test_panel\", true);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] name_str : Panel name\n"
"         * @param [IN] horizontal_b : Basic sizer orientation\n"
"         *   @arg false : Vertical\n"
"         *   @arg true : Horizontal\n"
"         * @return Panel index\n"
"         *\n"
"         */\n"
"\n"
"        add(name_str, horizontal_b);\n"
"\n"
"        /** @brief Get panel show status\n"
"         *\n"
"         * @code\n"
"         * var test_panel;\n"
"         * test_panel = gui.panel.add(\"test_panel\", true);\n"
"         * gui.panel.set(test_panel, false);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] panel_d : Panel buffer index\n"
"         * @param [IN] show_b : Panel show status\n"
"         * @return\n"
"         *\n"
"         */\n"
"\n"
"        set(panel_d, show_b);\n"
"\n"
"        /** @brief Get panel show status\n"
"         *\n"
"         * @code\n"
"         * var test_panel;\n"
"         * var show_status;\n"
"         * test_panel = gui.panel.add(\"test_panel\", true);\n"
"         * show_status = gui.panel.get(test_panel);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] panel_d : Panel buffer index\n"
"         * @return Show status\n"
"         *\n"
"         */\n"
"\n"
"        get(panel_d);\n"
"\n"
"        /** @brief Get panel main sizer\n"
"         *\n"
"         * @code\n"
"         * var test_panel;\n"
"         * var test_sizer;\n"
"         * test_panel = gui.panel.add(\"test_panel\", true);\n"
"         * test_sizer = gui.panel.get_sizer(test_panel);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] panel_d : Panel buffer index\n"
"         * @return Sizer index\n"
"         *\n"
"         */\n"
"\n"
"        get_sizer(panel_d);\n"
"\n"
"};\n"
"\n"
"/**\n"
"  * @class sizer\n"
"  * @brief wxSizer class interface\n"
"  *\n"
"  */\n"
"\n"
"class sizer\n"
"{\n"
"\n"
"    public:\n"
"\n"
"        /** @brief Add new AUI panel\n"
"         *\n"
"         * @code\n"
"         * var test_panel;\n"
"         * var test_sizer;\n"
"         * var item_sizer;\n"
"         * test_panel = gui.panel.add(\"test_panel\", true);\n"
"         * test_sizer = gui.panel.get_sizer(test_panel);\n"
"         * item_sizer = gui.sizer.add(test_sizer, 0, true);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] sizer_index_d : Parent sizer index\n"
"         * @param [IN] proportion_d : Proportion in parent sizer element\n"
"         * @param [IN] horizontal_b : Sizer orientation\n"
"         *   @arg false : Vertical\n"
"         *   @arg true : Horizontal\n"
"         * @return Sizer index\n"
"         *\n"
"         */\n"
"\n"
"        add(sizer_index_d, proportion_d, horizontal_b);\n"
"\n"
"};\n"
"\n"
"/**\n"
"  * @class button\n"
"  * @brief wxButton class interface\n"
"  *\n"
"  */\n"
"\n"
"class button\n"
"{\n"
"\n"
"    public:\n"
"\n"
"        /** @brief Add new button\n"
"         *\n"
"         * @code\n"
"         * var test_panel;\n"
"         * var test_sizer;\n"
"         * var test_button;\n"
"         * test_panel = gui.panel.add(\"test_panel\", true);\n"
"         * test_sizer = gui.panel.get_sizer(test_panel);\n"
"         * test_button = gui.button.add(test_sizer, \"test\", 0, false);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] sizer_index_d : Parent sizer index\n"
"         * @param [IN] text_str : Button text\n"
"         * @param [IN] proportion_d : Proportion in parent sizer element\n"
"         * @param [IN] expand_b : Expand in sizer flag\n"
"         *   @arg false : Default size\n"
"         *   @arg true : Expand\n"
"         * @return Button index\n"
"         *\n"
"         */\n"
"\n"
"        add(sizer_index_d, text_str, proportion_d, expand_b);\n"
"\n"
"        /** @brief Register button event\n"
"         *\n"
"         * @code\n"
"         * var test_panel;\n"
"         * var test_sizer;\n"
"         * var test_button;\n"
"         * var reg_event_bool;\n"
"         * test_panel = gui.panel.add(\"test_panel\", true);\n"
"         * test_sizer = gui.panel.get_sizer(test_panel);\n"
"         * test_button = gui.button.add(test_sizer, \"test\", 0, false);\n"
"         * reg_event_bool = gui.button.reg_event(test_button, \"on_button_click\");\n"
"         * function on_button_click (component_id)\n"
"         * {\n"
"         * }\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] button_index_d : Button index\n"
"         * @param [IN] event_fct_str : Function name\n"
"         * @return Event register status\n"
"         *   @arg false : Fail\n"
"         *   @arg true : Event registered\n"
"         *\n"
"         */\n"
"\n"
"        reg_event(button_index_d, event_fct_str);\n"
"\n"
"};\n"
"\n"
"/**\n"
"  * @class check_box\n"
"  * @brief wxCheckBox class interface\n"
"  *\n"
"  */\n"
"\n"
"class check_box\n"
"{\n"
"\n"
"    public:\n"
"\n"
"        /** @brief Add new check box\n"
"         *\n"
"         * @code\n"
"         * var test_panel;\n"
"         * var test_sizer;\n"
"         * var test_check_box;\n"
"         * test_panel = gui.panel.add(\"test_panel\", true);\n"
"         * test_sizer = gui.panel.get_sizer(test_panel);\n"
"         * test_check_box = gui.check_box.add(test_sizer, \"test\", 0, false,false);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] sizer_index_d : Parent sizer index\n"
"         * @param [IN] text_str : Button text\n"
"         * @param [IN] proportion_d : Proportion in parent sizer element\n"
"         * @param [IN] expand_b : Expand in sizer flag\n"
"         *   @arg false : Default size\n"
"         *   @arg true : Expand\n"
"         * @param [IN] state_b : Initial state\n"
"         *   @arg false : Un-checked\n"
"         *   @arg true : Checked\n"
"         * @return Check box index\n"
"         *\n"
"         */\n"
"\n"
"        add(sizer_index_d, text_str, proportion_d, expand_b, state_b);\n"
"\n"
"        /** @brief Register check box event\n"
"         *\n"
"         * @code\n"
"         * var test_panel;\n"
"         * var test_sizer;\n"
"         * var test_check_box;\n"
"         * var reg_event_bool;\n"
"         * test_panel = gui.panel.add(\"test_panel\", true);\n"
"         * test_sizer = gui.panel.get_sizer(test_panel);\n"
"         * test_check_box = gui.check_box.add(test_sizer, \"test\", 0, false,false);\n"
"         * reg_event_bool = gui.check_box.reg_event(test_check_box, \"on_check_box_click\");\n"
"         * function on_check_box_click (component_id)\n"
"         * {\n"
"         * }\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] check_box_index_d : Check box index\n"
"         * @param [IN] event_fct_str : Function name\n"
"         * @return Event register status\n"
"         *   @arg false : Fail\n"
"         *   @arg true : Event registered\n"
"         *\n"
"         */\n"
"\n"
"        reg_event(check_box_index_d, event_fct_str);\n"
"\n"
"        /** @brief Get check box state\n"
"         *\n"
"         * @code\n"
"         * var test_panel;\n"
"         * var test_sizer;\n"
"         * var test_check_box;\n"
"         * var test_state_bool;\n"
"         * test_panel = gui.panel.add(\"test_panel\", true);\n"
"         * test_sizer = gui.panel.get_sizer(test_panel);\n"
"         * test_check_box = gui.check_box.add(test_sizer, \"test\", 0, false,false);\n"
"         * test_state_bool = gui.check_box.get(test_check_box);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] check_box_index_d : Check box index\n"
"         * @return Check box state\n"
"         *   @arg false : Un-checked\n"
"         *   @arg true : Checked\n"
"         *\n"
"         */\n"
"\n"
"        get(check_box_index_d);\n"
"\n"
"        /** @brief Set check box state\n"
"         *\n"
"         * @code\n"
"         * var test_panel;\n"
"         * var test_sizer;\n"
"         * var test_check_box;\n"
"         * var test_status_bool;\n"
"         * test_panel = gui.panel.add(\"test_panel\", true);\n"
"         * test_sizer = gui.panel.get_sizer(test_panel);\n"
"         * test_check_box = gui.check_box.add(test_sizer, \"test\", 0, false,false);\n"
"         * test_status_bool = gui.check_box.set(test_check_box, true);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] check_box_index_d : Check box index\n"
"         * @param [IN] state_b : New check box state\n"
"         *   @arg false : Un-checked\n"
"         *   @arg true : Checked\n"
"         * @return Change status\n"
"         *   @arg false : Fail\n"
"         *   @arg true : Changed\n"
"         *\n"
"         */\n"
"\n"
"        set(check_box_index_d, state_b);\n"
"\n"
"};\n"
"\n"
"/**\n"
"  * @class textctrl\n"
"  * @brief wxTextCtrl class interface\n"
"  *\n"
"  */\n"
"\n"
"class textctrl\n"
"{\n"
"\n"
"    public:\n"
"\n"
"        /** @brief Add new text control\n"
"         *\n"
"         * @code\n"
"         * var test_panel;\n"
"         * var test_sizer;\n"
"         * var test_textctrl;\n"
"         * test_panel = gui.panel.add(\"test_panel\", true);\n"
"         * test_sizer = gui.panel.get_sizer(test_panel);\n"
"         * test_textctrl = gui.textctrl.add(test_sizer, \"Hello world!\", 0, false, true);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] sizer_index_d : Parent sizer index\n"
"         * @param [IN] text_str : Default text\n"
"         * @param [IN] proportion_d : Proportion in parent sizer element\n"
"         * @param [IN] expand_b : Expand in sizer flag\n"
"         *   @arg false : Default size\n"
"         *   @arg true : Expand\n"
"         * @param [IN] multiline_b : Multiline enable\n"
"         *   @arg false : One line\n"
"         *   @arg true : Multiline\n"
"         * @return textctrl index\n"
"         *\n"
"         */\n"
"\n"
"        add(sizer_index_d, text_str, proportion_d, expand_b, multiline_b);\n"
"\n"
"        /** @brief Get text control string\n"
"         *\n"
"         * @code\n"
"         * var test_panel;\n"
"         * var test_sizer;\n"
"         * var test_textctrl;\n"
"         * var text_str;\n"
"         * test_panel = gui.panel.add(\"test_panel\", true);\n"
"         * test_sizer = gui.panel.get_sizer(test_panel);\n"
"         * test_textctrl = gui.textctrl.add(test_sizer, \"\", 0, false, true);\n"
"         * text_str = gui.textctrl.get(test_textctrl, 0);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] textctrl_index_d : Text control index\n"
"         * @param [IN] line_d : Read line number\n"
"         * @return Read data\n"
"         *\n"
"         */\n"
"\n"
"        get(textctrl_index_d, line_d);\n"
"\n"
"        /** @brief Set text control string\n"
"         *\n"
"         * @code\n"
"         * var test_panel;\n"
"         * var test_sizer;\n"
"         * var test_textctrl;\n"
"         * var test_status_bool;\n"
"         * test_panel = gui.panel.add(\"test_panel\", true);\n"
"         * test_sizer = gui.panel.get_sizer(test_panel);\n"
"         * test_textctrl = gui.textctrl.add(test_sizer, \"\", 0, false, true);\n"
"         * test_status_bool = gui.textctrl.set(test_textctrl, \"Hello world!\");\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] textctrl_index_d : Text control index\n"
"         * @param [IN] text_str : New text (Erase textctrl before set)\n"
"         * @return Change status\n"
"         *   @arg false : Fail\n"
"         *   @arg true : Changed\n"
"         *\n"
"         */\n"
"\n"
"        set(textctrl_index_d, text_str);\n"
"\n"
"        /** @brief Append text control string\n"
"         *\n"
"         * @code\n"
"         * var test_panel;\n"
"         * var test_sizer;\n"
"         * var test_textctrl;\n"
"         * var test_status_bool;\n"
"         * test_panel = gui.panel.add(\"test_panel\", true);\n"
"         * test_sizer = gui.panel.get_sizer(test_panel);\n"
"         * test_textctrl = gui.textctrl.add(test_sizer, \"\", 0, false, true);\n"
"         * test_status_bool = gui.textctrl.append(test_textctrl, \"Hello world!\");\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] textctrl_index_d : Text control index\n"
"         * @param [IN] text_str : New text (Append text at the end)\n"
"         * @return Append status\n"
"         *   @arg false : Fail\n"
"         *   @arg true : Changed\n"
"         *\n"
"         */\n"
"\n"
"        append(textctrl_index_d, text_str);\n"
"\n"
"};\n"
"\n"
"/**\n"
"  * @class static_text\n"
"  * @brief wxStaticText class interface\n"
"  *\n"
"  */\n"
"\n"
"class static_text\n"
"{\n"
"\n"
"    public:\n"
"\n"
"        /** @brief Add new static text\n"
"         *\n"
"         * @code\n"
"         * var test_panel;\n"
"         * var test_sizer;\n"
"         * var test_static_text;\n"
"         * test_panel = gui.panel.add(\"test_panel\", true);\n"
"         * test_sizer = gui.panel.get_sizer(test_panel);\n"
"         * test_static_text = gui.static_text.add(test_sizer, \"Hello world!\", 0, false);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] sizer_index_d : Parent sizer index\n"
"         * @param [IN] text_str : Default text\n"
"         * @param [IN] proportion_d : Proportion in parent sizer element\n"
"         * @param [IN] expand_b : Expand in sizer flag\n"
"         *   @arg false : Default size\n"
"         *   @arg true : Expand\n"
"         * @return static_text index\n"
"         *\n"
"         */\n"
"\n"
"        add(sizer_index_d, text_str, proportion_d, expand_b);\n"
"\n"
"        /** @brief Set static text string\n"
"         *\n"
"         * @code\n"
"         * var test_panel;\n"
"         * var test_sizer;\n"
"         * var test_static_text;\n"
"         * var test_status_bool;\n"
"         * test_panel = gui.panel.add(\"test_panel\", true);\n"
"         * test_sizer = gui.panel.get_sizer(test_panel);\n"
"         * test_static_text = gui.static_text.add(test_sizer, \"Test\", 0, false);\n"
"         * test_status_bool = gui.static_text.set(test_static_text, \"Hello world!\");\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] static_text_index_d : static_text index\n"
"         * @param [IN] text_str : New text (Erase static_text before set)\n"
"         * @return Set status\n"
"         *   @arg false : Fail\n"
"         *   @arg true : Changed\n"
"         *\n"
"         */\n"
"\n"
"        set(static_text_index_d, text_str);\n"
"\n"
"};\n"
"\n"
"/**\n"
"  * @class slider\n"
"  * @brief wxSlider class interface\n"
"  *\n"
"  */\n"
"\n"
"class slider\n"
"{\n"
"\n"
"    public:\n"
"\n"
"        /** @brief Add new slider\n"
"         *\n"
"         * @code\n"
"         * var test_panel;\n"
"         * var test_sizer;\n"
"         * var test_slider;\n"
"         * test_panel = gui.panel.add(\"test_panel\", true);\n"
"         * test_sizer = gui.panel.get_sizer(test_panel);\n"
"         * test_slider = gui.slider.add(test_sizer, -10, 200, 0, true);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] sizer_index_d : Parent sizer index\n"
"         * @param [IN] min_d : Minimum set value\n"
"         * @param [IN] max_d : Maximum set value\n"
"         * @param [IN] proportion_d : Proportion in parent sizer element\n"
"         * @param [IN] expand_b : Expand in sizer flag\n"
"         *   @arg false : Default size\n"
"         *   @arg true : Expand\n"
"         * @return slider index\n"
"         *\n"
"         */\n"
"\n"
"        add(sizer_index_d, min_d, max_d, proportion_d, expand_b);\n"
"\n"
"        /** @brief Register slider event\n"
"         *\n"
"         * @code\n"
"         * var test_panel;\n"
"         * var test_sizer;\n"
"         * var test_slider;\n"
"         * var reg_event_bool;\n"
"         * test_panel = gui.panel.add(\"test_panel\", true);\n"
"         * test_sizer = gui.panel.get_sizer(test_panel);\n"
"         * test_slider = gui.slider.add(test_sizer, -10, 200, 0, true);\n"
"         * reg_event_bool = gui.slider.reg_event(test_slider, \"on_slider_update\");\n"
"         * function on_slider_update (component_id)\n"
"         * {\n"
"         * }\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] slider_index_d : slider index\n"
"         * @param [IN] event_fct_str : Function name\n"
"         * @return Event register status\n"
"         *   @arg false : Fail\n"
"         *   @arg true : Event registered\n"
"         *\n"
"         */\n"
"\n"
"        reg_event(slider_index_d, event_fct_str);\n"
"\n"
"        /** @brief Get slider value\n"
"         *\n"
"         * @code\n"
"         * var test_panel;\n"
"         * var test_sizer;\n"
"         * var test_slider;\n"
"         * var test_slider_value;\n"
"         * test_panel = gui.panel.add(\"test_panel\", true);\n"
"         * test_sizer = gui.panel.get_sizer(test_panel);\n"
"         * test_slider = gui.slider.add(test_sizer, -10, 200, 0, true);\n"
"         * test_slider_value = gui.slider.get(test_slider);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] slider_index_d : slider index\n"
"         * @return Set value\n"
"         *\n"
"         */\n"
"\n"
"        get(slider_index_d);\n"
"\n"
"        /** @brief Set slider value\n"
"         *\n"
"         * @code\n"
"         * var test_panel;\n"
"         * var test_sizer;\n"
"         * var test_slider;\n"
"         * test_panel = gui.panel.add(\"test_panel\", true);\n"
"         * test_sizer = gui.panel.get_sizer(test_panel);\n"
"         * test_slider = gui.slider.add(test_sizer, -10, 200, 0, true);\n"
"         * gui.slider.set(test_slider, 80);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] slider_index_d : slider index\n"
"         * @param [IN] value_b : New slider value\n"
"         * @return\n"
"         *\n"
"         */\n"
"\n"
"        set(slider_index_d, value_b);\n"
"\n"
"};\n"
"\n"
"/**\n"
"  * @class gauge\n"
"  * @brief wxGauge class interface\n"
"  *\n"
"  */\n"
"\n"
"class gauge\n"
"{\n"
"\n"
"    public:\n"
"\n"
"        /** @brief Add new gauge\n"
"         *\n"
"         * @code\n"
"         * var test_panel;\n"
"         * var test_sizer;\n"
"         * var test_gauge;\n"
"         * test_panel = gui.panel.add(\"test_panel\", true);\n"
"         * test_sizer = gui.panel.get_sizer(test_panel);\n"
"         * test_gauge = gui.gauge.add(test_sizer, 0, true,1000);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] sizer_index_d : Parent sizer index\n"
"         * @param [IN] proportion_d : Proportion in parent sizer element\n"
"         * @param [IN] expand_b : Expand in sizer flag\n"
"         *   @arg false : Default size\n"
"         *   @arg true : Expand\n"
"         * @param [IN] size_d : Gauge size\n"
"         * @return Gauge index\n"
"         *\n"
"         */\n"
"\n"
"        add(sizer_index_d, proportion_d, expand_b, size_d);\n"
"\n"
"        /** @brief Get gauge value\n"
"         *\n"
"         * @code\n"
"         * var test_panel;\n"
"         * var test_sizer;\n"
"         * var test_gauge;\n"
"         * var test_gauge_value;\n"
"         * test_panel = gui.panel.add(\"test_panel\", true);\n"
"         * test_sizer = gui.panel.get_sizer(test_panel);\n"
"         * test_gauge = gui.gauge.add(test_sizer, 0, true,1000);\n"
"         * test_gauge_value = gui.gauge.get(test_gauge);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] gauge_index_d : gauge index\n"
"         * @return Set value\n"
"         *\n"
"         */\n"
"\n"
"        get(gauge_index_d);\n"
"\n"
"        /** @brief Set gauge value\n"
"         *\n"
"         * @code\n"
"         * var test_panel;\n"
"         * var test_sizer;\n"
"         * var test_gauge;\n"
"         * var test_status_bool;\n"
"         * test_panel = gui.panel.add(\"test_panel\", true);\n"
"         * test_sizer = gui.panel.get_sizer(test_panel);\n"
"         * test_gauge = gui.gauge.add(test_sizer, 0, true,1000);\n"
"         * test_status_bool = gui.gauge.set(test_gauge, 600);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] gauge_index_d : gauge index\n"
"         * @param [IN] value_b : New gauge value\n"
"         * @return\n"
"         *\n"
"         */\n"
"\n"
"        set(gauge_index_d, value_b);\n"
"\n"
"};\n"
"\n"
"/**\n"
"  * @class led\n"
"  * @brief wxLed class interface\n"
"  *\n"
"  */\n"
"\n"
"class led\n"
"{\n"
"\n"
"    public:\n"
"\n"
"        /** @brief Add new LED\n"
"         *\n"
"         * @code\n"
"         * var test_panel;\n"
"         * var test_sizer;\n"
"         * var test_led;\n"
"         * test_panel = gui.panel.add(\"test_panel\", true);\n"
"         * test_sizer = gui.panel.get_sizer(test_panel);\n"
"         * test_led = gui.led.add(test_sizer);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] sizer_index_d : Parent sizer index\n"
"         * @return LED index\n"
"         *\n"
"         */\n"
"\n"
"        add(sizer_index_d);\n"
"\n"
"        /** @brief Add new LED with custom state color\n"
"         *\n"
"         * @code\n"
"         * var test_panel;\n"
"         * var test_sizer;\n"
"         * var test_led;\n"
"         * test_panel = gui.panel.add(\"test_panel\", true);\n"
"         * test_sizer = gui.panel.get_sizer(test_panel);\n"
"         * test_led = gui.led.add(test_sizer, 0x0000FFFF, 0x00808080);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] sizer_index_d : Parent sizer index\n"
"         * @param [IN] on_color_d : On state LED color\n"
"         * @param [IN] off_color_d : On state LED color\n"
"         * @return LED buffer index\n"
"         *\n"
"         */\n"
"\n"
"        add(sizer_index_d, on_color_d, off_color_d)\n"
"\n"
"        /** @brief Get LED value\n"
"         *\n"
"         * @code\n"
"         * var test_panel;\n"
"         * var test_sizer;\n"
"         * var test_led;\n"
"         * var state_led_b;\n"
"         * test_panel = gui.panel.add(\"test_panel\", true);\n"
"         * test_sizer = gui.panel.get_sizer(test_panel);\n"
"         * test_led = gui.led.add(test_sizer);\n"
"         * state_led_b = gui.led.get(test_led);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] led_index_d : LED index\n"
"         * @return Set value\n"
"         *\n"
"         */\n"
"\n"
"        get(led_index_d);\n"
"\n"
"        /** @brief Set led value\n"
"         *\n"
"         * @code\n"
"         * var test_panel;\n"
"         * var test_sizer;\n"
"         * var test_led;\n"
"         * test_panel = gui.panel.add(\"test_panel\", true);\n"
"         * test_sizer = gui.panel.get_sizer(test_panel);\n"
"         * test_led = gui.led.add(test_sizer);\n"
"         * gui.led.set(test_led, true);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] led_index_d : LED index\n"
"         * @param [IN] value_b : New LED state\n"
"         * @return Set value\n"
"         *\n"
"         */\n"
"\n"
"        set(led_index_d, value_b);\n"
"\n"
"};\n"
"\n"
"/**\n"
"* @}\n"
"*/\n"
"\n"
"/**\n"
"  * @defgroup GUI_user_object\n"
"  * @brief User GUI object\n"
"  * @{\n"
"  */\n"
"\n"
"/**\n"
"  * @class graph\n"
"  * @brief data_plot class interface\n"
"  *\n"
"  */\n"
"\n"
"class graph\n"
"{\n"
"\n"
"    public:\n"
"\n"
"        /** @brief Add new graph\n"
"         *\n"
"         * @code\n"
"         * var test_panel;\n"
"         * var test_sizer;\n"
"         * var test_graph;\n"
"         * test_panel = gui.panel.add(\"test_panel\", true);\n"
"         * test_sizer = gui.panel.get_sizer(test_panel);\n"
"         * test_graph = gui.graph.add(test_sizer, \"data\", 3000.0, 40.0, 0.1);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] sizer_index_d : Parent sizer index\n"
"         * @param [IN] name_str : Graph name\n"
"         * @param [IN] graph_range_d : Range symetrical around 0\n"
"         * @param [IN] buffer_length_d : Sample memory size\n"
"         * @param [IN] time_step_d : Sample time.\n"
"         * @return graph index\n"
"         *\n"
"         */\n"
"\n"
"        add(sizer_index_d, name_str, graph_range_d, buffer_length_d, time_step_d);\n"
"\n"
"        /** @brief Insert graph signal\n"
"         *\n"
"         * @code\n"
"         * var test_panel;\n"
"         * var test_sizer;\n"
"         * var test_graph;\n"
"         * var graph_signal = [];\n"
"         * var insert_state_val;\n"
"         * test_panel = gui.panel.add(\"test_panel\", true);\n"
"         * test_sizer = gui.panel.get_sizer(test_panel);\n"
"         * test_graph = gui.graph.add(test_sizer, \"data\", 3000.0, 40.0, 0.1);\n"
"         * insert_state_val = gui.graph.insert_signal(test_graph, \"signal\",0xff000000,1,0);\n"
"         * graph_signal.push(0);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] graph_index_d : graph index\n"
"         * @param [IN] name_str : Signal name\n"
"         * @param [IN] color_d : Signal line color\n"
"         * @param [IN] width_d : Signal line width\n"
"         * @param [IN] style_d : Signal style width\n"
"         *   @arg 0 : Solid\n"
"         *   @arg 1 : Dot\n"
"         *   @arg 2 : Long dash\n"
"         *   @arg 3 : Short dash\n"
"         *   @arg 4 : Dot dash\n"
"         * @return Signal insert status\n"
"         *\n"
"         */\n"
"\n"
"        insert_signal(graph_index_d, name_str, color_d, width_d, style_d);\n"
"\n"
"        /** @brief Set graph value\n"
"         *\n"
"         * @code\n"
"         * var test_panel;\n"
"         * var test_sizer;\n"
"         * var test_graph;\n"
"         * var graph_signal = [];\n"
"         * test_panel = gui.panel.add(\"test_panel\", true);\n"
"         * test_sizer = gui.panel.get_sizer(test_panel);\n"
"         * test_graph = gui.graph.add(test_sizer, \"data\", 10.0, 5.0, 1);\n"
"         * graph_signal.push(gui.graph.insert_signal(test_graph, \"signal\",0xff000000,1,0));\n"
"         * graph_signal[0] = 10;\n"
"         * gui.graph.set(test_graph, graph_signal);\n"
"         * graph_signal[0] = 4;\n"
"         * gui.graph.set(test_graph, graph_signal);\n"
"         * graph_signal[0] = -8;\n"
"         * gui.graph.set(test_graph, graph_signal);\n"
"         * graph_signal[0] = 0;\n"
"         * gui.graph.set(test_graph, graph_signal);\n"
"         * @endcode\n"
"         *\n"
"         * @param [IN] graph_index_d : graph index\n"
"         * @param [IN] v_data_d : Signal data array with one sample per signal\n"
"         * @return Set status\n"
"         *   @arg false : Fail\n"
"         *   @arg true : Update\n"
"         *\n"
"         */\n"
"\n"
"        set(graph_index_d, v_data_d);\n"
"\n"
"};\n"
"\n"
"/**\n"
"* @}\n"
"*/\n"
"\n"
"/**\n"
"  * @class gui\n"
"  * @brief Main JS GUI object\n"
"  *\n"
"  */\n"
"\n"
"class gui\n"
"{\n"
"\n"
"    public:\n"
"\n"
"        panel panel;\n"
"        sizer sizer;\n"
"        button button;\n"
"        check_box check_box;\n"
"        textctrl textctrl;\n"
"        static_text static_text;\n"
"        slider slider;\n"
"        gauge gauge;\n"
"        led led;\n"
"        graph graph;\n"
"\n"
"};\n"
"\n"
"/**\n"
"* @}\n"
"*/\n"
"\n"
"/**\n"
"  * @defgroup Public_function\n"
"  * @brief Global public function\n"
"  * @{\n"
"  */\n"
"\n"
"/** @brief Delay\n"
" *\n"
" * @code\n"
" * // Delay 1s\n"
" * delay(1000);\n"
" * @endcode\n"
" *\n"
" * @param [IN] time_d : Delay time in ms\n"
" * @return\n"
" *\n"
" */\n"
"\n"
"delay(time_d);\n"
"\n"
"/** @brief Get random value\n"
" *\n"
" * @code\n"
" * var random_val = rand();\n"
" * @endcode\n"
" *\n"
" * @param\n"
" * @return Random value\n"
" *\n"
" */\n"
"\n"
"rand();\n"
"\n"
"/** @brief Get random value from range\n"
" *\n"
" * @code\n"
" * var random_val = rand(-10, 10);\n"
" * @endcode\n"
" *\n"
" * @param [IN] min_d : Min value\n"
" * @param [IN] max_d : Max value\n"
" * @return Random value\n"
" *\n"
" */\n"
"\n"
"rand(min_d, max_d);\n"
"\n"
"/** @brief Show alert dialog\n"
" *\n"
" * @code\n"
" * alert(\"Hello world!\");\n"
" * @endcode\n"
" *\n"
" * @param [IN] text_str : Alert text\n"
" * @return\n"
" *\n"
" */\n"
"\n"
"alert(text_str);\n"
"\n"
"/** @brief Set show main frame\n"
" *\n"
" * @code\n"
" * gui(false);\n"
" * @endcode\n"
" *\n"
" * @param [IN] show_main_b : Show main frame\n"
" *   @arg false : Hide\n"
" *   @arg true : Show\n"
" * @return\n"
" *\n"
" */\n"
"\n"
"gui(show_main_b);\n"
"\n"
"/** @brief Set show main frame and Script frame name\n"
" *\n"
" * @code\n"
" * gui(false, \"Script frame\");\n"
" * @endcode\n"
" *\n"
" * @param [IN] show_main_b : Show main frame\n"
" *   @arg false : Hide\n"
" *   @arg true : Show\n"
" * @param [IN] text_str : Script frame name\n"
" * @return\n"
" *\n"
" */\n"
"\n"
"gui(show_main_b, text_str);\n"
"\n"
"/** @brief Set show main frame and Script frame name\n"
" *\n"
" * @code\n"
" * gui(false, \"Script frame\", true);\n"
" * @endcode\n"
" *\n"
" * @param [IN] show_main_b : Show main frame\n"
" *   @arg false : Hide\n"
" *   @arg true : Show\n"
" * @param [IN] text_str : Script frame name\n"
" * @param [IN] show_script_b : Show script frame\n"
" *   @arg false : Hide\n"
" *   @arg true : Show\n"
" * @return\n"
" *\n"
" */\n"
"\n"
"gui(show_main_b, text_str, show_script_b);\n"
"\n"
"/** @brief Register exit callback\n"
" *\n"
" * @code\n"
" * reg_exit(\"exit\");\n"
" * function exit()\n"
" * {\n"
" * }\n"
" * @endcode\n"
" *\n"
" * @param [IN] function_str : Callback function\n"
" * @return\n"
" *\n"
" */\n"
"\n"
"reg_exit(function_str);\n"
"\n"
"/** @brief Register exit callback\n"
" *\n"
" * @code\n"
" * var crc_val;\n"
" * var data_array;\n"
" * data_array.push(0x01);\n"
" * data_array.push(0x02);\n"
" * data_array.push(0x03);\n"
" * data_array.push(0x04);\n"
" * crc_val = crc(0xe232, 0x04C11DB7, 0xffffffff, data_array);\n"
" * // crc_val -> 0x1dabe74f;\n"
" * @endcode\n"
" *\n"
" * @param [IN] type_d : CRC type 8,16,32\n"
" * @param [IN] polynom_d : CRC polynomial\n"
" * @param [IN] init_d : CRC initialization data\n"
" * @param [IN] v_data_d : data\n"
" * @return Count CRC value\n"
" *\n"
" */\n"
"\n"
"crc(type_d, polynom_d, init_d, v_data_d);\n"
"\n"
"/**\n"
"* @}\n"
"*/\n"
"\n"
"/**\n"
"  * @defgroup Public_variable\n"
"  * @brief Global public variable\n"
"  * @{\n"
"  */\n"
"\n"
"main_frame main_frame;\n"
"uart uart;\n"
"time time;\n"
"timer timer;\n"
"file file;\n"
"project project;\n"
"gui gui;\n"
"\n"
"/**\n"
"* @}\n"
"*/\n"
"\n"
"/*****************************************************END OF FILE************/\n");

/*****************************************************END OF FILE************/
