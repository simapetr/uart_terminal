.TH "main_frame" 3 "Sun Feb 16 2020" "Version V2.0" "JerryScript interface documentation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
main_frame \- System Main frame GUI control\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <jerryscript_h\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBgui\fP (bool show_b)"
.br
.RI "Set show main frame\&. "
.ti -1c
.RI "void \fBconsole_rx_enable\fP (bool enable_b)"
.br
.RI "Set show Rx data in main frame console\&. "
.ti -1c
.RI "bool \fBis_console_rx_enable\fP (void)"
.br
.RI "Get console enable state\&. "
.ti -1c
.RI "void \fBprintf\fP (string text_str)"
.br
.RI "Print text sting in to console\&. "
.ti -1c
.RI "void \fBstatus\fP (string text_str)"
.br
.RI "Print status text sting in to main frame status\&. "
.ti -1c
.RI "void \fBclear\fP (void)"
.br
.RI "Clear main frame console text\&. "
.ti -1c
.RI "void \fBopen\fP (double bite_timeout_d, double baudrate_d double stop_bits_d double parity_d double bit_length_d double port_num_d)"
.br
.RI "Open and set port communication and GUI component in main frame\&. "
.ti -1c
.RI "void \fBclose\fP (void)"
.br
.RI "Close communication in main frame\&. "
.ti -1c
.RI "double \fBget_open_status\fP (void)"
.br
.RI "Get communication open status\&. "
.ti -1c
.RI "string \fBget_data\fP (string info_str) void set_progress(string text_str"
.br
.RI "Show input dialog with user info text and return user input data\&. "
.ti -1c
.RI "double \fBreg_event\fP (string event_fct_str)"
.br
.RI "Register event on send button click (in event function is parameter array with console input data) "
.ti -1c
.RI "void \fBhide\fP (bool enable_b)"
.br
.RI "Set show main frame\&. "
.in -1c
.SS "Data Fields"

.in +1c
.ti -1c
.RI "string double \fBprogress_d\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
System Main frame GUI control\&. 
.PP
Definition at line 58 of file jerryscript_h\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void clear (void)"

.PP
Clear main frame console text\&. 
.PP
.nf
main_frame\&.clear();

.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIvoid\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.SS "void close (void)"

.PP
Close communication in main frame\&. 
.PP
.nf
main_frame\&.close();

.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIvoid\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.SS "void console_rx_enable (bool enable_b)"

.PP
Set show Rx data in main frame console\&. 
.PP
.nf
main_frame\&.console_rx_enable(false);

.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP enable_b : Show Rx data in console 
.PD 0

.IP "\(bu" 2
false : Hide 
.IP "\(bu" 2
true : Show 
.PP
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.SS "string get_data (string info_str)"

.PP
Show input dialog with user info text and return user input data\&. 
.PP
.nf
var text_str;
text_str = main_frame\&.get_data("Get input text:");

.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP info_str : User text 
.RE
.PP
\fBReturns:\fP
.RS 4
string : User input textSet status progress in progress dialog
.RE
.PP
.PP
.nf
// Show 50% progress
main_frame\&.set_progress("User process progress:", 50);
// Close dialog
main_frame\&.set_progress("User process progress:", 101);
.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP text_str : User text 
.br
\fI[IN]\fP progress_d : actual progress 
.PD 0

.IP "\(bu" 2
0 - 100 : Show progress value 
.IP "\(bu" 2
>100 : Close progress dialog 
.PP
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.SS "double get_open_status (void)"

.PP
Get communication open status\&. 
.PP
.nf
var state_var;
state_var = main_frame\&.get_open_status();

.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIvoid\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
double : communication status 
.PD 0

.IP "\(bu" 2
0 : Open error 
.IP "\(bu" 2
1 : Open 
.IP "\(bu" 2
2 : Handle error 
.IP "\(bu" 2
3 : Write configuration error 
.IP "\(bu" 2
4 : Write timeout error 
.IP "\(bu" 2
5 : Close error 
.IP "\(bu" 2
6 : Close 
.IP "\(bu" 2
7 : Opened 
.PP
.RE
.PP

.SS "void \fBgui\fP (bool show_b)"

.PP
Set show main frame\&. 
.PP
.nf
main_frame\&.gui(false);

.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP show_b : Show frame status 
.PD 0

.IP "\(bu" 2
false : Hide 
.IP "\(bu" 2
true : Show 
.PP
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.SS "void hide (bool enable_b)"

.PP
Set show main frame\&. 
.PP
.nf
main_frame\&.hide(true);

.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP enable_b : Show main frame 
.PD 0

.IP "\(bu" 2
false : Show 
.IP "\(bu" 2
true : Hide 
.PP
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.SS "bool is_console_rx_enable (void)"

.PP
Get console enable state\&. 
.PP
.nf
var state_var;
state_var = main_frame\&.is_console_rx_enable();

.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIvoid\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
bool : Console enable state 
.PD 0

.IP "\(bu" 2
false : Disable 
.IP "\(bu" 2
true : Enable 
.PP
.RE
.PP

.SS "void open (double bite_timeout_d, double baudrate_d double stop_bits_d double parity_d double bit_length_d double port_num_d)"

.PP
Open and set port communication and GUI component in main frame\&. 
.PP
.nf
uart\&.open(1,57600,0,0,8,4);

.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP bite_timeout_d : Packet timeout 
.br
\fI[IN]\fP baudrate_d : Communication speed 
.br
\fI[IN]\fP stop_bits_d : Number of character stop bits 
.PD 0

.IP "\(bu" 2
0 : 1 
.IP "\(bu" 2
1 : 1,5 
.IP "\(bu" 2
2 : 2 
.PP
.br
\fI[IN]\fP parity_d : Character parity type 
.PD 0

.IP "\(bu" 2
0 : None 
.IP "\(bu" 2
1 : Odd 
.IP "\(bu" 2
2 : Even 
.IP "\(bu" 2
3 : Char 
.IP "\(bu" 2
4 : Space 
.PP
.br
\fI[IN]\fP bit_length_d : Character bit length 
.br
\fI[IN]\fP port_num_d : Port number 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.SS "void printf (string text_str)"

.PP
Print text sting in to console\&. 
.PP
.nf
main_frame\&.printf("Hello world!");

.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP text_str : Print text 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.SS "double reg_event (string event_fct_str)"

.PP
Register event on send button click (in event function is parameter array with console input data) 
.PP
.nf
main_frame\&.reg_event("on_send_click");
function on_send_click(data_array)
{
}

.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP event_fct_str : Print text 
.RE
.PP
\fBReturns:\fP
.RS 4
double : registration status 
.PD 0

.IP "\(bu" 2
0 : Registration error 
.IP "\(bu" 2
1 : Registered 
.PP
.RE
.PP

.SS "void status (string text_str)"

.PP
Print status text sting in to main frame status\&. 
.PP
.nf
main_frame\&.status("Hello world!");

.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP text_str : Print text 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for JerryScript interface documentation from the source code\&.
