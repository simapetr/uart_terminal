.TH "uart" 3 "Wed Feb 26 2020" "Version V2.0" "JerryScript interface documentation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
uart \- System UART port driver\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <jerryscript_h\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "double \fBopen\fP (double bite_timeout_d, double baudrate_d double stop_bits_d double parity_d double bit_length_d double port_num_d)"
.br
.RI "Open and set port communication\&. "
.ti -1c
.RI "void \fBclose\fP (void)"
.br
.RI "Close port communication\&. "
.ti -1c
.RI "double \fBreg_event\fP (string event_name_str)"
.br
.RI "Register receive event\&. "
.ti -1c
.RI "double \fBwrite\fP (double char_d)"
.br
.RI "Write character\&. "
.ti -1c
.RI "double \fBwrite\fP (vector< double > &v_data_d)"
.br
.RI "Write data array\&. "
.ti -1c
.RI "double \fBwrite\fP (string char_str)"
.br
.RI "Write ASCI string\&. "
.ti -1c
.RI "double \fBwrite\fP (vector< double > &v_data_d, double length_d)"
.br
.RI "Write data array user size\&. "
.ti -1c
.RI "bool \fBget_ctrl\fP (string name_str)"
.br
.RI "Get port control line state\&. "
.ti -1c
.RI "void \fBset_ctrl\fP (string name_str, bool state_b)"
.br
.RI "Set port control line state\&. "
.in -1c
.SH "Detailed Description"
.PP 
System UART port driver\&. 
.PP
Definition at line 361 of file jerryscript_h\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void close (void)"

.PP
Close port communication\&. 
.PP
.nf
uart\&.close();

.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIvoid\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.SS "bool get_ctrl (string name_str)"

.PP
Get port control line state\&. 
.PP
.nf
var data_bool;
uart\&.open(1,57600,0,0,8,4);
data_bool = uart\&.get_ctrl("CTS");

.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP name_str : Control line name 
.PD 0

.IP "\(bu" 2
RX : Rx line logic state 
.IP "\(bu" 2
CTS : Clear to send 
.IP "\(bu" 2
DSR : Data set ready 
.IP "\(bu" 2
RING : Ring indication 
.IP "\(bu" 2
RLSD : Receive line signal detect 
.PP
.RE
.PP
\fBReturns:\fP
.RS 4
bool : Control line logic state 
.RE
.PP

.SS "double open (double bite_timeout_d, double baudrate_d double stop_bits_d double parity_d double bit_length_d double port_num_d)"

.PP
Open and set port communication\&. 
.PP
.nf
uart\&.open(1,57600,0,0,8,4);

.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP bite_timeout_d : Packet timeout 
.br
\fI[IN]\fP baudrate_d : Communication speed 
.br
\fI[IN]\fP stop_bits_d : Number of character stop bits 
.PD 0

.IP "\(bu" 2
0 : 1 
.IP "\(bu" 2
1 : 1,5 
.IP "\(bu" 2
2 : 2 
.PP
.br
\fI[IN]\fP parity_d : Character parity type 
.PD 0

.IP "\(bu" 2
0 : None 
.IP "\(bu" 2
1 : Odd 
.IP "\(bu" 2
2 : Even 
.IP "\(bu" 2
3 : Char 
.IP "\(bu" 2
4 : Space 
.PP
.br
\fI[IN]\fP bit_length_d : Character bit length 
.br
\fI[IN]\fP port_num_d : Port number 
.RE
.PP
\fBReturns:\fP
.RS 4
double : Open status (See uart_status_t) 
.RE
.PP

.SS "double reg_event (string event_name_str)"

.PP
Register receive event\&. 
.PP
.nf
uart\&.open(1,57600,0,0,8,4);
uart\&.reg_event("rx_data");
function rx_data ( event_var, data_var )
{
    // Check if data event
    if (event_var & 0x1)
    {
        if (data_var\&.length)
        {
            // Process data
        }
    }
}

.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP event_name_str : Event function name 
.RE
.PP
\fBReturns:\fP
.RS 4
double : Register status 
.RE
.PP

.SS "void set_ctrl (string name_str, bool state_b)"

.PP
Set port control line state\&. 
.PP
.nf
uart\&.open(1,57600,0,0,8,4);
uart\&.set_ctrl("DTR");

.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP name_str : Control line name 
.PD 0

.IP "\(bu" 2
DTR : Data terminal ready 
.IP "\(bu" 2
RTS : Request to send 
.IP "\(bu" 2
BREAK : Tx line break 
.IP "\(bu" 2
XOFF : Transmit OFF 
.IP "\(bu" 2
XON : Transmit ON 
.PP
.br
\fI[IN]\fP state_b : New logic state 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.SS "double write (double char_d)"

.PP
Write character\&. 
.PP
.nf
uart\&.open(1,57600,0,0,8,4);
uart\&.write(0x20);

.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP char_d : Character 
.RE
.PP
\fBReturns:\fP
.RS 4
double : Send status 
.RE
.PP

.SS "double write (vector< double > & v_data_d)"

.PP
Write data array\&. 
.PP
.nf
var data_array;
uart\&.open(1,57600,0,0,8,4);
data_array\&.push(0x01);
data_array\&.push(0x02);
data_array\&.push(0x03);
uart\&.write(data_array);

.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP v_data_d : Data array 
.RE
.PP
\fBReturns:\fP
.RS 4
double : Send status 
.RE
.PP

.SS "double write (string char_str)"

.PP
Write ASCI string\&. 
.PP
.nf
var data_str;
uart\&.open(1,57600,0,0,8,4);
data_str = "Hello World!";
uart\&.write(data_str);

.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP char_str : Text string 
.RE
.PP
\fBReturns:\fP
.RS 4
double : Send status 
.RE
.PP

.SS "double write (vector< double > & v_data_d, double length_d)"

.PP
Write data array user size\&. 
.PP
.nf
var data_array;
uart\&.open(1,57600,0,0,8,4);
data_array\&.push(0x01);
data_array\&.push(0x02);
data_array\&.push(0x03);
// Send only 2 char from array
uart\&.write(data_array, 2);

.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP v_data_d : Data array 
.br
\fI[IN]\fP length_d : Number of send data 
.RE
.PP
\fBReturns:\fP
.RS 4
double : Send status 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for JerryScript interface documentation from the source code\&.
