.TH "UART" 3 "Mon Apr 20 2020" "Version V2.0" "UART Terminal" \" -*- nroff -*-
.ad l
.nh
.SH NAME
UART \- UART class definition\&.  

.SH SYNOPSIS
.br
.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBpacket_buffer_t\fP"
.br
.ti -1c
.RI "class \fBuart_js_c\fP"
.br
.ti -1c
.RI "struct \fBuart_cfg_t\fP"
.br
.ti -1c
.RI "struct \fBuart_event_buffer_t\fP"
.br
.ti -1c
.RI "class \fBuart_port\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBd_buffer_size\fP   4096"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef void(* \fBuart_event_fct\fP) (void *p_parametr_void, uint32_t event_type_ui32, uint8_t *p_data_sui8, uint32_t length_ui32)"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBuart_com_ctrl_in_t\fP { \fBe_rx\fP = 1, \fBe_cts\fP = 2, \fBe_dsr\fP = 3, \fBe_ring\fP = 4, \fBe_rlsd\fP = 5 }"
.br
.ti -1c
.RI "enum \fBuart_com_ctrl_out_t\fP { \fBe_dtr\fP = 0, \fBe_rts\fP = 1, \fBe_break\fP = 2, \fBe_xoff\fP = 3, \fBe_xon\fP = 4 }"
.br
.ti -1c
.RI "enum \fBuart_status_t\fP { \fBe_00_open_error\fP = 0, \fBe_01_open\fP = 1, \fBe_02_handle_error\fP = 2, \fBe_03_write_configuration_error\fP = 3, \fBe_04_write_timeout_error\fP = 4, \fBe_05_close_error\fP = 5, \fBe_06_close\fP = 6, \fBe_07_opened\fP = 7 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBreg_host_class\fP (\fBuart_port\fP *p_com_uart_port, wxCondition *p_data_wxcondition)"
.br
.RI "Registration object in to class\&. "
.ti -1c
.RI "void \fBdereg_host_class\fP (void)"
.br
.RI "Deregistration object in to class\&. "
.ti -1c
.RI "static uint32_t \fBopen\fP (const uint32_t funct_ui32, const uint32_t this_ui32, const uint32_t *p_args_ui32, const uint32_t args_cnt_ui32)"
.br
.RI "Open UART port (JS method 'open') "
.ti -1c
.RI "static uint32_t \fBclose\fP (const uint32_t funct_ui32, const uint32_t this_ui32, const uint32_t *p_args_ui32, const uint32_t args_cnt_ui32)"
.br
.RI "Close UART port (JS method 'close') "
.ti -1c
.RI "static uint32_t \fBreg_event\fP (const uint32_t funct_ui32, const uint32_t this_ui32, const uint32_t *p_args_ui32, const uint32_t args_cnt_ui32)"
.br
.RI "Set Rx event (JS method 'reg_event') "
.ti -1c
.RI "static uint32_t \fBwrite\fP (const uint32_t funct_ui32, const uint32_t this_ui32, const uint32_t *p_args_ui32, const uint32_t args_cnt_ui32)"
.br
.RI "Write UART (JS method 'write') "
.ti -1c
.RI "static uint32_t \fBget_ctrl\fP (const uint32_t funct_ui32, const uint32_t this_ui32, const uint32_t *p_args_ui32, const uint32_t args_cnt_ui32)"
.br
.RI "Get UART control line status (JS method 'get_ctrl') "
.ti -1c
.RI "static uint32_t \fBset_ctrl\fP (const uint32_t funct_ui32, const uint32_t this_ui32, const uint32_t *p_args_ui32, const uint32_t args_cnt_ui32)"
.br
.RI "Set UART control line status (JS method 'set_ctrl') "
.ti -1c
.RI "static uint32_t \fBcall\fP (void *p_parametr_void)"
.br
.RI "Call UART data RX event (Must be called form JS thread) "
.ti -1c
.RI "\fBuart_port\fP (void)"
.br
.RI "Constructor\&. "
.ti -1c
.RI "\fB~uart_port\fP (void)"
.br
.RI "Destructor\&. "
.ti -1c
.RI "string * \fBget_port\fP (void)"
.br
.RI "Get pointer on port array\&. "
.ti -1c
.RI "uart_status_t \fBopen\fP (\fBuart_cfg_t\fP *p_data_uart_cfg)"
.br
.RI "Open and set UART port communication\&. "
.ti -1c
.RI "void \fBclose\fP (void)"
.br
.RI "Close UART port communication\&. "
.ti -1c
.RI "uint8_t \fBset\fP (\fBuart_event_fct\fP function_uart_event_fct, void *p_parametr_void)"
.br
.RI "Associate driver event function\&. "
.ti -1c
.RI "uint8_t \fBclear\fP (\fBuart_event_fct\fP function_uart_event_fct)"
.br
.RI "Delete associated event function\&. "
.ti -1c
.RI "void \fBclear\fP (void)"
.br
.RI "Delete all associated event\&. "
.ti -1c
.RI "uart_status_t \fBget_state\fP (void)"
.br
.RI "Get port status (call after construction object for test correct open) "
.ti -1c
.RI "\fBuart_cfg_t\fP \fBget\fP (void)"
.br
.RI "Get port configuration\&. "
.ti -1c
.RI "uint8_t \fBflush\fP (void)"
.br
.RI "Erase communication buffer\&. "
.ti -1c
.RI "uint8_t \fBsend\fP (uint8_t data_ui8)"
.br
.RI "Write character\&. "
.ti -1c
.RI "uint8_t \fBsend\fP (uint8_t *p_data_sui8, uint32_t len_ui32)"
.br
.RI "Write data string\&. "
.ti -1c
.RI "uint8_t \fBget\fP (\fBuart_com_ctrl_in_t\fP pin_uart_com_ctrl_in)"
.br
.RI "Get com state\&. "
.ti -1c
.RI "void \fBset\fP (uart_com_ctrl_out_t pin_uart_com_ctrl_out, uint8_t state_ui8)"
.br
.RI "Set com state\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "vector< \fBpacket_buffer_t\fP > \fBlv_main_packet_buffer\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
UART class definition\&. 

UART communication bus\&.
.SH "Macro Definition Documentation"
.PP 
.SS "#define d_buffer_size   4096"
Define 
.PP
Definition at line 53 of file in_js_class_uart_js_cpp\&.cpp\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef void(* uart_event_fct) (void *p_parametr_void, uint32_t event_type_ui32, uint8_t *p_data_sui8, uint32_t length_ui32)"
Type 
.PP
Definition at line 98 of file hw_dr_uart_driver_h\&.h\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBuart_com_ctrl_in_t\fP"
Enum 
.PP
Definition at line 62 of file hw_dr_uart_driver_h\&.h\&.
.SH "Function Documentation"
.PP 
.SS "uint32_t call (void * p_parametr_void)\fC [static]\fP"

.PP
Call UART data RX event (Must be called form JS thread) 
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP p_parametr_void : Handle on registered object 
.RE
.PP
\fBReturns:\fP
.RS 4
uint32_t : number of item in UART buffer 
.RE
.PP

.PP
Definition at line 542 of file in_js_class_uart_js_cpp\&.cpp\&.
.SS "uint8_t clear (\fBuart_event_fct\fP function_uart_event_fct)"

.PP
Delete associated event function\&. 
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP function_uart_event_fct : Pointer on event function 
.RE
.PP
\fBReturns:\fP
.RS 4
uint8_t : Status event registration 
.PD 0

.IP "\(bu" 2
0 : Event was not associated 
.IP "\(bu" 2
1 : Event deleted 
.PP
.RE
.PP

.PP
Definition at line 321 of file hw_dr_uart_driver_cpp\&.cpp\&.
.SS "void clear (void)"

.PP
Delete all associated event\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvoid\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.PP
Definition at line 344 of file hw_dr_uart_driver_cpp\&.cpp\&.
.SS "uint32_t close (const uint32_t funct_ui32, const uint32_t this_ui32, const uint32_t * p_args_ui32, const uint32_t args_cnt_ui32)\fC [static]\fP"

.PP
Close UART port (JS method 'close') 
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP funct_ui32 : Unused 
.br
\fI[IN]\fP this_ui32 : Pointer on construct class 
.br
\fI[IN]\fP p_args_ui32 : Pointer on argument field 
.br
\fI[IN]\fP args_cnt_ui32 : Argument field size 
.RE
.PP
\fBReturns:\fP
.RS 4
uint32_t : returned data 
.RE
.PP

.PP
Definition at line 234 of file in_js_class_uart_js_cpp\&.cpp\&.
.SS "void close (void)"

.PP
Close UART port communication\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvoid\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.PP
Definition at line 253 of file hw_dr_uart_driver_cpp\&.cpp\&.
.SS "void dereg_host_class (void)"

.PP
Deregistration object in to class\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvoid\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.PP
Definition at line 162 of file in_js_class_uart_js_cpp\&.cpp\&.
.SS "uint8_t flush (void)"

.PP
Erase communication buffer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvoid\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
uint8_t : status 
.PD 0

.IP "\(bu" 2
0 : Clear procedure fail 
.IP "\(bu" 2
1 : Buffer is empty 
.PP
.RE
.PP

.PP
Definition at line 383 of file hw_dr_uart_driver_cpp\&.cpp\&.
.SS "\fBuart_cfg_t\fP get (void)"

.PP
Get port configuration\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvoid\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBuart_cfg_t\fP : Port configuration structure 
.RE
.PP

.PP
Definition at line 369 of file hw_dr_uart_driver_cpp\&.cpp\&.
.SS "uint8_t get (\fBuart_com_ctrl_in_t\fP pin_uart_com_ctrl_in)"

.PP
Get com state\&. 
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP pin_uart_com_ctrl_in : Pin ID 
.RE
.PP
\fBReturns:\fP
.RS 4
uint8_t : Pin state 
.RE
.PP

.PP
Definition at line 484 of file hw_dr_uart_driver_cpp\&.cpp\&.
.SS "uint32_t get_ctrl (const uint32_t funct_ui32, const uint32_t this_ui32, const uint32_t * p_args_ui32, const uint32_t args_cnt_ui32)\fC [static]\fP"

.PP
Get UART control line status (JS method 'get_ctrl') 
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP funct_ui32 : Unused 
.br
\fI[IN]\fP this_ui32 : Pointer on construct class 
.br
\fI[IN]\fP p_args_ui32 : Pointer on argument field 
.br
\fI[IN]\fP args_cnt_ui32 : Argument field size 
.RE
.PP
\fBReturns:\fP
.RS 4
uint32_t : returned data 
.RE
.PP

.PP
Definition at line 408 of file in_js_class_uart_js_cpp\&.cpp\&.
.SS "string * get_port (void)"

.PP
Get pointer on port array\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvoid\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
string : Pointer on available port array 
.RE
.PP

.PP
Definition at line 90 of file hw_dr_uart_driver_cpp\&.cpp\&.
.SS "uart_status_t get_state (void)"

.PP
Get port status (call after construction object for test correct open) 
.PP
\fBParameters:\fP
.RS 4
\fIvoid\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
uint8_t : uart_status_t 
.RE
.PP

.PP
Definition at line 357 of file hw_dr_uart_driver_cpp\&.cpp\&.
.SS "uint32_t open (const uint32_t funct_ui32, const uint32_t this_ui32, const uint32_t * p_args_ui32, const uint32_t args_cnt_ui32)\fC [static]\fP"

.PP
Open UART port (JS method 'open') 
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP funct_ui32 : Unused 
.br
\fI[IN]\fP this_ui32 : Pointer on construct class 
.br
\fI[IN]\fP p_args_ui32 : Pointer on argument field 
.br
\fI[IN]\fP args_cnt_ui32 : Argument field size 
.RE
.PP
\fBReturns:\fP
.RS 4
uint32_t : returned data 
.RE
.PP

.PP
Definition at line 178 of file in_js_class_uart_js_cpp\&.cpp\&.
.SS "uart_status_t open (\fBuart_cfg_t\fP * p_data_uart_cfg)"

.PP
Open and set UART port communication\&. 
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP p_data_uart_cfg : UART port configuration struct 
.RE
.PP
\fBReturns:\fP
.RS 4
Status 
.RE
.PP

.PP
Definition at line 138 of file hw_dr_uart_driver_cpp\&.cpp\&.
.SS "uint32_t reg_event (const uint32_t funct_ui32, const uint32_t this_ui32, const uint32_t * p_args_ui32, const uint32_t args_cnt_ui32)\fC [static]\fP"

.PP
Set Rx event (JS method 'reg_event') 
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP funct_ui32 : Unused 
.br
\fI[IN]\fP this_ui32 : Pointer on construct class 
.br
\fI[IN]\fP p_args_ui32 : Pointer on argument field 
.br
\fI[IN]\fP args_cnt_ui32 : Argument field size 
.RE
.PP
\fBReturns:\fP
.RS 4
uint32_t : returned data 
.RE
.PP

.PP
Definition at line 272 of file in_js_class_uart_js_cpp\&.cpp\&.
.SS "void reg_host_class (\fBuart_port\fP * p_com_uart_port, wxCondition * p_data_wxcondition)"

.PP
Registration object in to class\&. Function
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP p_com_uart_port : Pointer on registered class 
.br
\fI[IN]\fP p_data_wxcondition : Rx data call event 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.PP
Definition at line 90 of file in_js_class_uart_js_cpp\&.cpp\&.
.SS "uint8_t send (uint8_t data_ui8)"

.PP
Write character\&. 
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP data_ui8 : Data character 
.RE
.PP
\fBReturns:\fP
.RS 4
uint8_t : status 
.PD 0

.IP "\(bu" 2
0 : Data not send 
.IP "\(bu" 2
1 : Data send correctly 
.PP
.RE
.PP

.PP
Definition at line 397 of file hw_dr_uart_driver_cpp\&.cpp\&.
.SS "uint8_t send (uint8_t * p_data_sui8, uint32_t len_ui32)"

.PP
Write data string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP p_data_sui8 : Pointer on data buffer 
.br
\fI[IN]\fP len_ui32 : Buffer length 
.RE
.PP
\fBReturns:\fP
.RS 4
uint8_t : status 
.PD 0

.IP "\(bu" 2
0 : Data not send 
.IP "\(bu" 2
1 : Data send correctly 
.PP
.RE
.PP

.PP
Definition at line 442 of file hw_dr_uart_driver_cpp\&.cpp\&.
.SS "uint8_t set (\fBuart_event_fct\fP function_uart_event_fct, void * p_parametr_void)"

.PP
Associate driver event function\&. 
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP function_uart_event_fct : Pointer on event function 
.br
\fI[IN]\fP p_parameter_void : Input thread parameter 
.br
\fIp_parametr_void\fP : parameter for event function 
.PD 0

.IP "\(bu" 2
0 : Event is registered 
.IP "\(bu" 2
1 : Event stored 
.PP
.RE
.PP

.PP
Definition at line 287 of file hw_dr_uart_driver_cpp\&.cpp\&.
.SS "void set (uart_com_ctrl_out_t pin_uart_com_ctrl_out, uint8_t state_ui8)"

.PP
Set com state\&. 
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP pin_uart_com_ctrl_out : Pin ID 
.br
\fI[IN]\fP state_ui8 : UART control pin state 
.RE
.PP
\fBReturns:\fP
.RS 4
uint8_t : Pin state 
.RE
.PP

.PP
Definition at line 532 of file hw_dr_uart_driver_cpp\&.cpp\&.
.SS "uint32_t set_ctrl (const uint32_t funct_ui32, const uint32_t this_ui32, const uint32_t * p_args_ui32, const uint32_t args_cnt_ui32)\fC [static]\fP"

.PP
Set UART control line status (JS method 'set_ctrl') 
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP funct_ui32 : Unused 
.br
\fI[IN]\fP this_ui32 : Pointer on construct class 
.br
\fI[IN]\fP p_args_ui32 : Pointer on argument field 
.br
\fI[IN]\fP args_cnt_ui32 : Argument field size 
.RE
.PP
\fBReturns:\fP
.RS 4
uint32_t : returned data 
.RE
.PP

.PP
Definition at line 477 of file in_js_class_uart_js_cpp\&.cpp\&.
.SS "\fBuart_port\fP (void)"

.PP
Constructor\&. Function
.PP
\fBParameters:\fP
.RS 4
\fIvoid\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.PP
Definition at line 57 of file hw_dr_uart_driver_cpp\&.cpp\&.
.SS "uint32_t write (const uint32_t funct_ui32, const uint32_t this_ui32, const uint32_t * p_args_ui32, const uint32_t args_cnt_ui32)\fC [static]\fP"

.PP
Write UART (JS method 'write') 
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP funct_ui32 : Unused 
.br
\fI[IN]\fP this_ui32 : Pointer on construct class 
.br
\fI[IN]\fP p_args_ui32 : Pointer on argument field 
.br
\fI[IN]\fP args_cnt_ui32 : Argument field size 
.RE
.PP
\fBReturns:\fP
.RS 4
uint32_t : returned data 
.RE
.PP

.PP
Definition at line 320 of file in_js_class_uart_js_cpp\&.cpp\&.
.SS "~\fBuart_port\fP (void)"

.PP
Destructor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvoid\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.PP
Definition at line 78 of file hw_dr_uart_driver_cpp\&.cpp\&.
.SH "Variable Documentation"
.PP 
.SS "vector<\fBpacket_buffer_t\fP> lv_main_packet_buffer"
Local variable 
.PP
Definition at line 74 of file in_js_class_uart_js_cpp\&.cpp\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for UART Terminal from the source code\&.
