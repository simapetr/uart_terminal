.TH "Slider" 3 "Sun Feb 16 2020" "Version V2.0" "UART Terminal" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Slider \- Slider class definition\&.  

.SH SYNOPSIS
.br
.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "class \fBslider_js_c\fP"
.br
.ti -1c
.RI "struct \fBslider_buffer_t\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBreg_host_class\fP (void *p_gui_interface_void)"
.br
.RI "Registration object in to class\&. "
.ti -1c
.RI "static uint32_t \fBadd\fP (const uint32_t funct_ui32, const uint32_t this_ui32, const uint32_t *p_args_ui32, const uint32_t args_cnt_ui32)"
.br
.RI "Add new slider (JS function 'add') "
.ti -1c
.RI "static uint32_t \fBreg_event\fP (const uint32_t funct_ui32, const uint32_t this_ui32, const uint32_t *p_args_ui32, const uint32_t args_cnt_ui32)"
.br
.RI "Set slider update event (JS method 'reg_event') "
.ti -1c
.RI "static uint32_t \fBget\fP (const uint32_t funct_ui32, const uint32_t this_ui32, const uint32_t *p_args_ui32, const uint32_t args_cnt_ui32)"
.br
.RI "Get slider data (JS function 'get') "
.ti -1c
.RI "static uint32_t \fBset\fP (const uint32_t funct_ui32, const uint32_t this_ui32, const uint32_t *p_args_ui32, const uint32_t args_cnt_ui32)"
.br
.RI "Set slider data (JS function 'set') "
.ti -1c
.RI "uint32_t \fBadd_slider\fP (double sizer_index_d, double min_d, double max_d, double proportion_d, bool expand_b)"
.br
.RI "Add slider\&. "
.ti -1c
.RI "bool \fBset_slider_event\fP (double index_d, wxString event_fct_str)"
.br
.RI "Set slider event\&. "
.ti -1c
.RI "int32_t \fBget_slider_data\fP (double index_d)"
.br
.RI "Get slider data\&. "
.ti -1c
.RI "void \fBset_slider_data\fP (double index_d, double data_d)"
.br
.RI "Set slider data\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "vector< \fBslider_buffer_t\fP > \fBlv_data_slider_buffer\fP"
.br
.ti -1c
.RI "uint32_t \fBl_cnt_slider_ui32\fP = 0"
.br
.in -1c
.SH "Detailed Description"
.PP 
Slider class definition\&. 

GUI slider component\&.
.SH "Function Documentation"
.PP 
.SS "uint32_t add (const uint32_t funct_ui32, const uint32_t this_ui32, const uint32_t * p_args_ui32, const uint32_t args_cnt_ui32)\fC [static]\fP"

.PP
Add new slider (JS function 'add') 
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP funct_ui32 : Unused 
.br
\fI[IN]\fP this_ui32 : Pointer on construct class 
.br
\fI[IN]\fP p_args_ui32 : Pointer on argument field 
.br
\fI[IN]\fP args_cnt_ui32 : Argument field size 
.RE
.PP
\fBReturns:\fP
.RS 4
uint32_t : returned data 
.RE
.PP

.PP
Definition at line 119 of file in_js_class_slider_js_cpp\&.cpp\&.
.SS "uint32_t add_slider (double sizer_index_d, double min_d, double max_d, double proportion_d, bool expand_b)"

.PP
Add slider\&. Function
.PP
\fBParameters:\fP
.RS 4
\fIsizer_index_d\fP : Parent sizer index 
.br
\fImin_d\fP : Minimal value 
.br
\fImax_d\fP : Maximal value 
.br
\fIproportion_d\fP : Relative proportion item in sizer 
.br
\fIexpand_b\fP : Expand 
.RE
.PP
\fBReturns:\fP
.RS 4
uint32_t : New slider buffer index 
.RE
.PP

.PP
Definition at line 95 of file in_js_gui_slider_cpp\&.cpp\&.
.SS "uint32_t get (const uint32_t funct_ui32, const uint32_t this_ui32, const uint32_t * p_args_ui32, const uint32_t args_cnt_ui32)\fC [static]\fP"

.PP
Get slider data (JS function 'get') 
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP funct_ui32 : Unused 
.br
\fI[IN]\fP this_ui32 : Pointer on construct class 
.br
\fI[IN]\fP p_args_ui32 : Pointer on argument field 
.br
\fI[IN]\fP args_cnt_ui32 : Argument field size 
.RE
.PP
\fBReturns:\fP
.RS 4
uint32_t : returned data 
.RE
.PP

.PP
Definition at line 210 of file in_js_class_slider_js_cpp\&.cpp\&.
.SS "int32_t get_slider_data (double index_d)"

.PP
Get slider data\&. 
.PP
\fBParameters:\fP
.RS 4
\fIindex_d\fP : Component index 
.RE
.PP
\fBReturns:\fP
.RS 4
int32_t : Button event reg status 
.RE
.PP

.PP
Definition at line 143 of file in_js_gui_slider_cpp\&.cpp\&.
.SS "uint32_t reg_event (const uint32_t funct_ui32, const uint32_t this_ui32, const uint32_t * p_args_ui32, const uint32_t args_cnt_ui32)\fC [static]\fP"

.PP
Set slider update event (JS method 'reg_event') 
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP funct_ui32 : Unused 
.br
\fI[IN]\fP this_ui32 : Pointer on construct class 
.br
\fI[IN]\fP p_args_ui32 : Pointer on argument field 
.br
\fI[IN]\fP args_cnt_ui32 : Argument field size 
.RE
.PP
\fBReturns:\fP
.RS 4
uint32_t : returned data 
.RE
.PP

.PP
Definition at line 162 of file in_js_class_slider_js_cpp\&.cpp\&.
.SS "void reg_host_class (void * p_gui_interface_void)"

.PP
Registration object in to class\&. Function
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP p_gui_interface_void : Pointer on registered class 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.PP
Definition at line 61 of file in_js_class_slider_js_cpp\&.cpp\&.
.SS "uint32_t set (const uint32_t funct_ui32, const uint32_t this_ui32, const uint32_t * p_args_ui32, const uint32_t args_cnt_ui32)\fC [static]\fP"

.PP
Set slider data (JS function 'set') 
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP funct_ui32 : Unused 
.br
\fI[IN]\fP this_ui32 : Pointer on construct class 
.br
\fI[IN]\fP p_args_ui32 : Pointer on argument field 
.br
\fI[IN]\fP args_cnt_ui32 : Argument field size 
.RE
.PP
\fBReturns:\fP
.RS 4
uint32_t : returned data 
.RE
.PP

.PP
Definition at line 249 of file in_js_class_slider_js_cpp\&.cpp\&.
.SS "void set_slider_data (double index_d, double data_d)"

.PP
Set slider data\&. 
.PP
\fBParameters:\fP
.RS 4
\fIindex_d\fP : Component index 
.br
\fIdata_d\fP : Data value 
.RE
.PP
\fBReturns:\fP
.RS 4
int32_t : Button event reg status 
.RE
.PP

.PP
Definition at line 162 of file in_js_gui_slider_cpp\&.cpp\&.
.SS "bool set_slider_event (double index_d, wxString event_fct_str)"

.PP
Set slider event\&. 
.PP
\fBParameters:\fP
.RS 4
\fIindex_d\fP : Component index 
.br
\fIevent_fct_str\fP : Reg function name 
.RE
.PP
\fBReturns:\fP
.RS 4
bool : Button event reg status 
.RE
.PP

.PP
Definition at line 124 of file in_js_gui_slider_cpp\&.cpp\&.
.SH "Variable Documentation"
.PP 
.SS "vector<\fBslider_buffer_t\fP> lv_data_slider_buffer"
Local variable 
.PP
Definition at line 75 of file in_js_gui_slider_cpp\&.cpp\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for UART Terminal from the source code\&.
