.TH "D:/project/uart_terminal/infrastructure/jerryscript/in_jerryscript_core_h.h" 3 "Sun Feb 16 2020" "Version V2.0" "UART Terminal" \" -*- nroff -*-
.ad l
.nh
.SH NAME
D:/project/uart_terminal/infrastructure/jerryscript/in_jerryscript_core_h.h \- JavaScript interpreter core function\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <stdbool\&.h>\fP
.br
\fC#include <stddef\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBjerry_property_descriptor_t\fP"
.br
.ti -1c
.RI "struct \fBjerry_heap_stats_t\fP"
.br
.ti -1c
.RI "struct \fBjerry_context_data_manager_t\fP"
.br
.ti -1c
.RI "struct \fBjerry_object_native_info_t\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBJERRY_DEPRECATED_API\fP"
.br
.ti -1c
.RI "#define \fBJERRY_API_MAJOR_VERSION\fP   1"
.br
.ti -1c
.RI "#define \fBJERRY_API_MINOR_VERSION\fP   0"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef uint8_t \fBjerry_char_t\fP"
.br
.ti -1c
.RI "typedef \fBjerry_char_t\fP * \fBjerry_char_ptr_t\fP"
.br
.ti -1c
.RI "typedef uint32_t \fBjerry_size_t\fP"
.br
.ti -1c
.RI "typedef uint32_t \fBjerry_length_t\fP"
.br
.ti -1c
.RI "typedef uint32_t \fBjerry_value_t\fP"
.br
.ti -1c
.RI "typedef \fBjerry_value_t\fP(* \fBjerry_external_handler_t\fP) (const \fBjerry_value_t\fP function_obj, const \fBjerry_value_t\fP this_val, const \fBjerry_value_t\fP args_p[], const \fBjerry_length_t\fP args_count)"
.br
.ti -1c
.RI "typedef void(* \fBjerry_object_free_callback_t\fP) (const uintptr_t native_p)"
.br
.ti -1c
.RI "typedef void(* \fBjerry_object_native_free_callback_t\fP) (void *native_p)"
.br
.ti -1c
.RI "typedef \fBjerry_value_t\fP(* \fBjerry_vm_exec_stop_callback_t\fP) (void *user_p)"
.br
.ti -1c
.RI "typedef bool(* \fBjerry_object_property_foreach_t\fP) (const \fBjerry_value_t\fP property_name, const \fBjerry_value_t\fP property_value, void *user_data_p)"
.br
.ti -1c
.RI "typedef bool(* \fBjerry_objects_foreach_t\fP) (const \fBjerry_value_t\fP object, void *user_data_p)"
.br
.ti -1c
.RI "typedef bool(* \fBjerry_objects_foreach_by_native_info_t\fP) (const \fBjerry_value_t\fP object, void *object_data_p, void *user_data_p)"
.br
.ti -1c
.RI "typedef void *(* \fBjerry_instance_alloc_t\fP) (size_t size, void *cb_data_p)"
.br
.ti -1c
.RI "typedef struct \fBjerry_instance_t\fP \fBjerry_instance_t\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBjerry_init_flag_t\fP { \fBJERRY_INIT_EMPTY\fP = (0u), \fBJERRY_INIT_SHOW_OPCODES\fP = (1u << 0), \fBJERRY_INIT_SHOW_REGEXP_OPCODES\fP = (1u << 1), \fBJERRY_INIT_MEM_STATS\fP = (1u << 2), \fBJERRY_INIT_MEM_STATS_SEPARATE\fP = (1u << 3), \fBJERRY_INIT_DEBUGGER\fP = (1u << 4) }"
.br
.ti -1c
.RI "enum \fBjerry_error_t\fP { \fBJERRY_ERROR_NONE\fP = 0, \fBJERRY_ERROR_COMMON\fP, \fBJERRY_ERROR_EVAL\fP, \fBJERRY_ERROR_RANGE\fP, \fBJERRY_ERROR_REFERENCE\fP, \fBJERRY_ERROR_SYNTAX\fP, \fBJERRY_ERROR_TYPE\fP, \fBJERRY_ERROR_URI\fP }"
.br
.ti -1c
.RI "enum \fBjerry_feature_t\fP { \fBJERRY_FEATURE_CPOINTER_32_BIT\fP, \fBJERRY_FEATURE_ERROR_MESSAGES\fP, \fBJERRY_FEATURE_JS_PARSER\fP, \fBJERRY_FEATURE_MEM_STATS\fP, \fBJERRY_FEATURE_PARSER_DUMP\fP, \fBJERRY_FEATURE_REGEXP_DUMP\fP, \fBJERRY_FEATURE_SNAPSHOT_SAVE\fP, \fBJERRY_FEATURE_SNAPSHOT_EXEC\fP, \fBJERRY_FEATURE_DEBUGGER\fP, \fBJERRY_FEATURE_VM_EXEC_STOP\fP, \fBJERRY_FEATURE_JSON\fP, \fBJERRY_FEATURE_PROMISE\fP, \fBJERRY_FEATURE_TYPEDARRAY\fP, \fBJERRY_FEATURE_DATE\fP, \fBJERRY_FEATURE_REGEXP\fP, \fBJERRY_FEATURE__COUNT\fP }"
.br
.ti -1c
.RI "enum \fBjerry_parse_opts_t\fP { \fBJERRY_PARSE_NO_OPTS\fP = 0, \fBJERRY_PARSE_STRICT_MODE\fP = (1 << 0) }"
.br
.ti -1c
.RI "enum \fBjerry_type_t\fP { \fBJERRY_TYPE_NONE\fP = 0u, \fBJERRY_TYPE_UNDEFINED\fP, \fBJERRY_TYPE_NULL\fP, \fBJERRY_TYPE_BOOLEAN\fP, \fBJERRY_TYPE_NUMBER\fP, \fBJERRY_TYPE_STRING\fP, \fBJERRY_TYPE_OBJECT\fP, \fBJERRY_TYPE_FUNCTION\fP }"
.br
.ti -1c
.RI "enum \fBjerry_typedarray_type_t\fP { \fBJERRY_TYPEDARRAY_INVALID\fP = 0, \fBJERRY_TYPEDARRAY_UINT8\fP, \fBJERRY_TYPEDARRAY_UINT8CLAMPED\fP, \fBJERRY_TYPEDARRAY_INT8\fP, \fBJERRY_TYPEDARRAY_UINT16\fP, \fBJERRY_TYPEDARRAY_INT16\fP, \fBJERRY_TYPEDARRAY_UINT32\fP, \fBJERRY_TYPEDARRAY_INT32\fP, \fBJERRY_TYPEDARRAY_FLOAT32\fP, \fBJERRY_TYPEDARRAY_FLOAT64\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBjerry_init\fP (\fBjerry_init_flag_t\fP flags)"
.br
.ti -1c
.RI "void \fBjerry_cleanup\fP (void)"
.br
.ti -1c
.RI "void \fBjerry_register_magic_strings\fP (const \fBjerry_char_ptr_t\fP *ex_str_items_p, uint32_t count, const \fBjerry_length_t\fP *str_lengths_p)"
.br
.ti -1c
.RI "void \fBjerry_get_memory_limits\fP (size_t *out_data_bss_brk_limit_p, size_t *out_stack_limit_p)"
.br
.ti -1c
.RI "void \fBjerry_gc\fP (void)"
.br
.ti -1c
.RI "void * \fBjerry_get_context_data\fP (const \fBjerry_context_data_manager_t\fP *manager_p)"
.br
.ti -1c
.RI "bool \fBjerry_get_memory_stats\fP (\fBjerry_heap_stats_t\fP *out_stats_p)"
.br
.ti -1c
.RI "bool \fBjerry_run_simple\fP (const \fBjerry_char_t\fP *script_source_p, size_t script_source_size, \fBjerry_init_flag_t\fP flags)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_parse\fP (const \fBjerry_char_t\fP *resource_name_p, size_t resource_name_length, const \fBjerry_char_t\fP *source_p, size_t source_size, uint32_t parse_opts)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_parse_function\fP (const \fBjerry_char_t\fP *resource_name_p, size_t resource_name_length, const \fBjerry_char_t\fP *arg_list_p, size_t arg_list_size, const \fBjerry_char_t\fP *source_p, size_t source_size, uint32_t parse_opts)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_run\fP (const \fBjerry_value_t\fP func_val)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_eval\fP (const \fBjerry_char_t\fP *source_p, size_t source_size, bool is_strict)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_run_all_enqueued_jobs\fP (void)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_get_global_object\fP (void)"
.br
.ti -1c
.RI "bool \fBjerry_value_is_array\fP (const \fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "bool \fBjerry_value_is_boolean\fP (const \fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "bool \fBjerry_value_is_constructor\fP (const \fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "bool \fBjerry_value_is_function\fP (const \fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "bool \fBjerry_value_is_number\fP (const \fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "bool \fBjerry_value_is_null\fP (const \fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "bool \fBjerry_value_is_object\fP (const \fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "bool \fBjerry_value_is_promise\fP (const \fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "bool \fBjerry_value_is_string\fP (const \fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "bool \fBjerry_value_is_undefined\fP (const \fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "\fBjerry_type_t\fP \fBjerry_value_get_type\fP (const \fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "bool \fBjerry_is_feature_enabled\fP (const \fBjerry_feature_t\fP feature)"
.br
.ti -1c
.RI "bool \fBjerry_value_has_error_flag\fP (const \fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "bool \fBjerry_value_has_abort_flag\fP (const \fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "void \fBjerry_value_clear_error_flag\fP (\fBjerry_value_t\fP *value_p)"
.br
.ti -1c
.RI "void \fBjerry_value_set_error_flag\fP (\fBjerry_value_t\fP *value_p)"
.br
.ti -1c
.RI "void \fBjerry_value_set_abort_flag\fP (\fBjerry_value_t\fP *value_p)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_get_value_without_error_flag\fP (\fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "\fBjerry_error_t\fP \fBjerry_get_error_type\fP (const \fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "bool \fBjerry_get_boolean_value\fP (const \fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "double \fBjerry_get_number_value\fP (const \fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "\fBjerry_size_t\fP \fBjerry_get_string_size\fP (const \fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "\fBjerry_size_t\fP \fBjerry_get_utf8_string_size\fP (const \fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "\fBjerry_length_t\fP \fBjerry_get_string_length\fP (const \fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "\fBjerry_length_t\fP \fBjerry_get_utf8_string_length\fP (const \fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "\fBjerry_size_t\fP \fBjerry_string_to_char_buffer\fP (const \fBjerry_value_t\fP value, \fBjerry_char_t\fP *buffer_p, \fBjerry_size_t\fP buffer_size)"
.br
.ti -1c
.RI "\fBjerry_size_t\fP \fBjerry_string_to_utf8_char_buffer\fP (const \fBjerry_value_t\fP value, \fBjerry_char_t\fP *buffer_p, \fBjerry_size_t\fP buffer_size)"
.br
.ti -1c
.RI "\fBjerry_size_t\fP \fBjerry_substring_to_char_buffer\fP (const \fBjerry_value_t\fP value, \fBjerry_length_t\fP start_pos, \fBjerry_length_t\fP end_pos, \fBjerry_char_t\fP *buffer_p, \fBjerry_size_t\fP buffer_size)"
.br
.ti -1c
.RI "\fBjerry_size_t\fP \fBjerry_substring_to_utf8_char_buffer\fP (const \fBjerry_value_t\fP value, \fBjerry_length_t\fP start_pos, \fBjerry_length_t\fP end_pos, \fBjerry_char_t\fP *buffer_p, \fBjerry_size_t\fP buffer_size)"
.br
.ti -1c
.RI "uint32_t \fBjerry_get_array_length\fP (const \fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "bool \fBjerry_value_to_boolean\fP (const \fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_value_to_number\fP (const \fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_value_to_object\fP (const \fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_value_to_primitive\fP (const \fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_value_to_string\fP (const \fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_acquire_value\fP (\fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "void \fBjerry_release_value\fP (\fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_create_array\fP (uint32_t size)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_create_boolean\fP (bool value)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_create_error\fP (\fBjerry_error_t\fP error_type, const \fBjerry_char_t\fP *message_p)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_create_error_sz\fP (\fBjerry_error_t\fP error_type, const \fBjerry_char_t\fP *message_p, \fBjerry_size_t\fP message_size)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_create_external_function\fP (\fBjerry_external_handler_t\fP handler_p)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_create_number\fP (double value)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_create_number_infinity\fP (bool sign)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_create_number_nan\fP (void)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_create_null\fP (void)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_create_object\fP (void)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_create_promise\fP (void)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_create_string_from_utf8\fP (const \fBjerry_char_t\fP *str_p)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_create_string_sz_from_utf8\fP (const \fBjerry_char_t\fP *str_p, \fBjerry_size_t\fP str_size)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_create_string\fP (const \fBjerry_char_t\fP *str_p)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_create_string_sz\fP (const \fBjerry_char_t\fP *str_p, \fBjerry_size_t\fP str_size)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_create_undefined\fP (void)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_has_property\fP (const \fBjerry_value_t\fP obj_val, const \fBjerry_value_t\fP prop_name_val)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_has_own_property\fP (const \fBjerry_value_t\fP obj_val, const \fBjerry_value_t\fP prop_name_val)"
.br
.ti -1c
.RI "bool \fBjerry_delete_property\fP (const \fBjerry_value_t\fP obj_val, const \fBjerry_value_t\fP prop_name_val)"
.br
.ti -1c
.RI "bool \fBjerry_delete_property_by_index\fP (const \fBjerry_value_t\fP obj_val, uint32_t index)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_get_property\fP (const \fBjerry_value_t\fP obj_val, const \fBjerry_value_t\fP prop_name_val)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_get_property_by_index\fP (const \fBjerry_value_t\fP obj_val, uint32_t index)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_set_property\fP (const \fBjerry_value_t\fP obj_val, const \fBjerry_value_t\fP prop_name_val, const \fBjerry_value_t\fP value_to_set)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_set_property_by_index\fP (const \fBjerry_value_t\fP obj_val, uint32_t index, const \fBjerry_value_t\fP value_to_set)"
.br
.ti -1c
.RI "void \fBjerry_init_property_descriptor_fields\fP (\fBjerry_property_descriptor_t\fP *prop_desc_p)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_define_own_property\fP (const \fBjerry_value_t\fP obj_val, const \fBjerry_value_t\fP prop_name_val, const \fBjerry_property_descriptor_t\fP *prop_desc_p)"
.br
.ti -1c
.RI "bool \fBjerry_get_own_property_descriptor\fP (const \fBjerry_value_t\fP obj_val, const \fBjerry_value_t\fP prop_name_val, \fBjerry_property_descriptor_t\fP *prop_desc_p)"
.br
.ti -1c
.RI "void \fBjerry_free_property_descriptor_fields\fP (const \fBjerry_property_descriptor_t\fP *prop_desc_p)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_call_function\fP (const \fBjerry_value_t\fP func_obj_val, const \fBjerry_value_t\fP this_val, const \fBjerry_value_t\fP args_p[], \fBjerry_size_t\fP args_count)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_construct_object\fP (const \fBjerry_value_t\fP func_obj_val, const \fBjerry_value_t\fP args_p[], \fBjerry_size_t\fP args_count)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_get_object_keys\fP (const \fBjerry_value_t\fP obj_val)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_get_prototype\fP (const \fBjerry_value_t\fP obj_val)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_set_prototype\fP (const \fBjerry_value_t\fP obj_val, const \fBjerry_value_t\fP proto_obj_val)"
.br
.ti -1c
.RI "\fBJERRY_DEPRECATED_API\fP bool \fBjerry_get_object_native_handle\fP (const \fBjerry_value_t\fP obj_val, uintptr_t *out_handle_p)"
.br
.ti -1c
.RI "\fBJERRY_DEPRECATED_API\fP void \fBjerry_set_object_native_handle\fP (const \fBjerry_value_t\fP obj_val, uintptr_t handle_p, \fBjerry_object_free_callback_t\fP freecb_p)"
.br
.ti -1c
.RI "bool \fBjerry_get_object_native_pointer\fP (const \fBjerry_value_t\fP obj_val, void **out_native_pointer_p, const \fBjerry_object_native_info_t\fP **out_pointer_info_p)"
.br
.ti -1c
.RI "bool \fBjerry_objects_foreach\fP (\fBjerry_objects_foreach_t\fP foreach_p, void *user_data)"
.br
.ti -1c
.RI "bool \fBjerry_objects_foreach_by_native_info\fP (const \fBjerry_object_native_info_t\fP *native_info_p, \fBjerry_objects_foreach_by_native_info_t\fP foreach_p, void *user_data_p)"
.br
.ti -1c
.RI "void \fBjerry_set_object_native_pointer\fP (const \fBjerry_value_t\fP obj_val, void *native_pointer_p, const \fBjerry_object_native_info_t\fP *native_info_p)"
.br
.ti -1c
.RI "bool \fBjerry_foreach_object_property\fP (const \fBjerry_value_t\fP obj_val, \fBjerry_object_property_foreach_t\fP foreach_p, void *user_data_p)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_resolve_or_reject_promise\fP (\fBjerry_value_t\fP promise, \fBjerry_value_t\fP argument, bool is_resolve)"
.br
.ti -1c
.RI "bool \fBjerry_is_valid_utf8_string\fP (const \fBjerry_char_t\fP *utf8_buf_p, \fBjerry_size_t\fP buf_size)"
.br
.ti -1c
.RI "bool \fBjerry_is_valid_cesu8_string\fP (const \fBjerry_char_t\fP *cesu8_buf_p, \fBjerry_size_t\fP buf_size)"
.br
.ti -1c
.RI "\fBjerry_instance_t\fP * \fBjerry_create_instance\fP (uint32_t heap_size, \fBjerry_instance_alloc_t\fP alloc, void *cb_data_p)"
.br
.ti -1c
.RI "void \fBjerry_set_vm_exec_stop_callback\fP (\fBjerry_vm_exec_stop_callback_t\fP stop_cb, void *user_p, uint32_t frequency)"
.br
.ti -1c
.RI "bool \fBjerry_value_is_arraybuffer\fP (const \fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_create_arraybuffer\fP (const \fBjerry_length_t\fP size)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_create_arraybuffer_external\fP (const \fBjerry_length_t\fP size, uint8_t *buffer_p, \fBjerry_object_native_free_callback_t\fP free_cb)"
.br
.ti -1c
.RI "\fBjerry_length_t\fP \fBjerry_arraybuffer_write\fP (const \fBjerry_value_t\fP value, \fBjerry_length_t\fP offset, const uint8_t *buf_p, \fBjerry_length_t\fP buf_size)"
.br
.ti -1c
.RI "\fBjerry_length_t\fP \fBjerry_arraybuffer_read\fP (const \fBjerry_value_t\fP value, \fBjerry_length_t\fP offset, uint8_t *buf_p, \fBjerry_length_t\fP buf_size)"
.br
.ti -1c
.RI "\fBjerry_length_t\fP \fBjerry_get_arraybuffer_byte_length\fP (const \fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "uint8_t * \fBjerry_get_arraybuffer_pointer\fP (const \fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "bool \fBjerry_value_is_typedarray\fP (\fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_create_typedarray\fP (\fBjerry_typedarray_type_t\fP type_name, \fBjerry_length_t\fP length)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_create_typedarray_for_arraybuffer_sz\fP (\fBjerry_typedarray_type_t\fP type_name, const \fBjerry_value_t\fP arraybuffer, \fBjerry_length_t\fP byte_offset, \fBjerry_length_t\fP length)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_create_typedarray_for_arraybuffer\fP (\fBjerry_typedarray_type_t\fP type_name, const \fBjerry_value_t\fP arraybuffer)"
.br
.ti -1c
.RI "\fBjerry_typedarray_type_t\fP \fBjerry_get_typedarray_type\fP (\fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "\fBjerry_length_t\fP \fBjerry_get_typedarray_length\fP (\fBjerry_value_t\fP value)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_get_typedarray_buffer\fP (\fBjerry_value_t\fP value, \fBjerry_length_t\fP *byte_offset, \fBjerry_length_t\fP *byte_length)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_json_parse\fP (const \fBjerry_char_t\fP *string_p, \fBjerry_size_t\fP string_size)"
.br
.ti -1c
.RI "\fBjerry_value_t\fP \fBjerry_json_stringfy\fP (const \fBjerry_value_t\fP object_to_stringify)"
.br
.in -1c
.SH "Detailed Description"
.PP 
JavaScript interpreter core function\&. 


.PP
\fBAuthor:\fP
.RS 4
js\&.foundation 
.RE
.PP
\fBVersion:\fP
.RS 4
V1\&.0 
.RE
.PP
\fBDate:\fP
.RS 4
22\&.04\&.2018 
.RE
.PP
\fBAttention:\fP
.RS 4
.SS " (C) JS Foundation and other contributors, http://js.foundation "
.RE
.PP
Licensed under the Apache License, Version 2\&.0 (the 'License'); you may not use this file except in compliance with the License\&. You may obtain a copy of the License at 
.PP
.nf
http://www.apache.org/licenses/LICENSE-2.0

.fi
.PP
.PP
Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an 'AS IS' BASIS WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied\&. See the License for the specific language governing permissions and limitations under the License\&. 
.PP
Definition in file \fBin_jerryscript_core_h\&.h\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for UART Terminal from the source code\&.
