.TH "Panel" 3 "Sun Feb 16 2020" "Version V2.0" "UART Terminal" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Panel \- Panel class definition\&.  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBpanel_js_c\fP"
.br
.ti -1c
.RI "struct \fBpanel_buffer_t\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBpanel_js_c::reg_host_class\fP (void *p_gui_interface_void)"
.br
.RI "Registration object in to class\&. "
.ti -1c
.RI "static uint32_t \fBpanel_js_c::add\fP (const uint32_t funct_ui32, const uint32_t this_ui32, const uint32_t *p_args_ui32, const uint32_t args_cnt_ui32)"
.br
.RI "Get actual epoch time in s (JS function 'now') "
.ti -1c
.RI "static uint32_t \fBpanel_js_c::get_sizer\fP (const uint32_t funct_ui32, const uint32_t this_ui32, const uint32_t *p_args_ui32, const uint32_t args_cnt_ui32)"
.br
.RI "Get panel sizer indef (JS function 'get_sizer') "
.ti -1c
.RI "uint32_t \fBgui_frame::add_panel\fP (wxString panel_name_str, bool horizontal_b)"
.br
.RI "Add AUI panel\&. "
.ti -1c
.RI "uint32_t \fBgui_frame::get_panel_sizer\fP (double panel_index_d)"
.br
.RI "Get panel main sizer\&. "
.ti -1c
.RI "wxPanel * \fBgui_frame::get_panel\fP (double index_d)"
.br
.RI "Get sizer\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "vector< \fBpanel_buffer_t\fP > \fBlv_data_panel_buffer\fP"
.br
.ti -1c
.RI "uint32_t \fBl_cnt_panel_ui32\fP = 0"
.br
.in -1c
.SH "Detailed Description"
.PP 
Panel class definition\&. 

GUI panel component\&.
.SH "Function Documentation"
.PP 
.SS "uint32_t panel_js_c::add (const uint32_t funct_ui32, const uint32_t this_ui32, const uint32_t * p_args_ui32, const uint32_t args_cnt_ui32)\fC [static]\fP"

.PP
Get actual epoch time in s (JS function 'now') 
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP funct_ui32 : Unused 
.br
\fI[IN]\fP this_ui32 : Pointer on construct class 
.br
\fI[IN]\fP p_args_ui32 : Pointer on argument field 
.br
\fI[IN]\fP args_cnt_ui32 : Argument field size 
.RE
.PP
\fBReturns:\fP
.RS 4
uint32_t : returned data 
.RE
.PP

.PP
Definition at line 107 of file in_js_class_panel_js_cpp\&.cpp\&.
.SS "uint32_t gui_frame::add_panel (wxString panel_name_str, bool horizontal_b)"

.PP
Add AUI panel\&. Function
.PP
\fBParameters:\fP
.RS 4
\fIpanel_name_str\fP : Panel name 
.br
\fIhorizontal_b\fP : Sizer orientation 
.RE
.PP
\fBReturns:\fP
.RS 4
uint32_t : new panel buffer index 
.RE
.PP

.PP
Definition at line 84 of file in_js_gui_panel_cpp\&.cpp\&.
.SS "wxPanel * gui_frame::get_panel (double index_d)"

.PP
Get sizer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIindex_d\fP : Sizer index 
.RE
.PP
\fBReturns:\fP
.RS 4
wxBoxSizer* : Box sizer object pointer 
.RE
.PP

.PP
Definition at line 131 of file in_js_gui_panel_cpp\&.cpp\&.
.SS "uint32_t gui_frame::get_panel_sizer (double panel_index_d)"

.PP
Get panel main sizer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpanel_index_d\fP : Panel index 
.RE
.PP
\fBReturns:\fP
.RS 4
uint32_t : Sizer index 
.RE
.PP

.PP
Definition at line 113 of file in_js_gui_panel_cpp\&.cpp\&.
.SS "uint32_t panel_js_c::get_sizer (const uint32_t funct_ui32, const uint32_t this_ui32, const uint32_t * p_args_ui32, const uint32_t args_cnt_ui32)\fC [static]\fP"

.PP
Get panel sizer indef (JS function 'get_sizer') 
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP funct_ui32 : Unused 
.br
\fI[IN]\fP this_ui32 : Pointer on construct class 
.br
\fI[IN]\fP p_args_ui32 : Pointer on argument field 
.br
\fI[IN]\fP args_cnt_ui32 : Argument field size 
.RE
.PP
\fBReturns:\fP
.RS 4
uint32_t : returned data 
.RE
.PP

.PP
Definition at line 159 of file in_js_class_panel_js_cpp\&.cpp\&.
.SS "void panel_js_c::reg_host_class (void * p_gui_interface_void)"

.PP
Registration object in to class\&. Function
.PP
\fBParameters:\fP
.RS 4
\fI[IN]\fP p_gui_interface_void : Pointer on registered class 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.PP
Definition at line 61 of file in_js_class_panel_js_cpp\&.cpp\&.
.SH "Variable Documentation"
.PP 
.SS "vector<\fBpanel_buffer_t\fP> lv_data_panel_buffer"
Local variable 
.PP
Definition at line 67 of file in_js_gui_panel_cpp\&.cpp\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for UART Terminal from the source code\&.
