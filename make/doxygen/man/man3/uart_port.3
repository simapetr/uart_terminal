.TH "uart_port" 3 "Sun Feb 16 2020" "Version V2.0" "UART Terminal" \" -*- nroff -*-
.ad l
.nh
.SH NAME
uart_port
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <hw_dr_uart_driver_h\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBuart_port\fP (void)"
.br
.RI "Constructor\&. "
.ti -1c
.RI "\fB~uart_port\fP (void)"
.br
.RI "Destructor\&. "
.ti -1c
.RI "void \fBget_port\fP (void)"
.br
.RI "Get UART port list\&. "
.ti -1c
.RI "string * \fBget_bus_array\fP (void)"
.br
.RI "Get pointer on port array\&. "
.ti -1c
.RI "uart_status_t \fBopen\fP (\fBuart_cfg_t\fP *p_data_uart_cfg)"
.br
.RI "Open and set UART port communication\&. "
.ti -1c
.RI "void \fBclose\fP (void)"
.br
.RI "Close UART port communication\&. "
.ti -1c
.RI "uint8_t \fBcreate_event\fP (\fBuart_event_fct\fP function_uart_event_fct, void *p_parametr_void)"
.br
.RI "Associate driver event function\&. "
.ti -1c
.RI "uint8_t \fBdelete_event\fP (\fBuart_event_fct\fP function_uart_event_fct)"
.br
.RI "Delete associated event function\&. "
.ti -1c
.RI "void \fBdelete_event_all\fP (void)"
.br
.RI "Delete all associated event\&. "
.ti -1c
.RI "uart_status_t \fBget_state\fP (void)"
.br
.RI "Get port status (call after construction object for test correct open) "
.ti -1c
.RI "uint32_t \fBget_last_error\fP (void)"
.br
.RI "Get port last error\&. "
.ti -1c
.RI "uint32_t \fBwait_rx_event\fP (void)"
.br
.RI "Wait for receive data\&. "
.ti -1c
.RI "uint8_t \fBflush\fP (void)"
.br
.RI "Erase communication buffer\&. "
.ti -1c
.RI "uint8_t \fBwrite_data\fP (uint8_t data_ui8)"
.br
.RI "Write character\&. "
.ti -1c
.RI "uint8_t \fBwrite_data\fP (uint8_t *p_data_sui8, uint32_t len_ui32)"
.br
.RI "Write data string\&. "
.ti -1c
.RI "uint8_t \fBwrite_data\fP (vector< uint8_t > &pv_data_sui8)"
.br
.RI "Write data vector\&. "
.ti -1c
.RI "uint8_t \fBread_data\fP (uint8_t *p_data_ui8)"
.br
.RI "Read character\&. "
.ti -1c
.RI "uint8_t \fBread_data\fP (string *p_data_str)"
.br
.RI "Read data from character buffer\&. "
.ti -1c
.RI "uint8_t \fBget_com_ctrl\fP (\fBuart_com_ctrl_in_t\fP pin_uart_com_ctrl_in)"
.br
.RI "Get com state\&. "
.ti -1c
.RI "void \fBset_com_ctrl\fP (uart_com_ctrl_out_t pin_uart_com_ctrl_out, uint8_t state_ui8)"
.br
.RI "Set com state\&. "
.in -1c
.SH "Detailed Description"
.PP 
Class 
.PP
Definition at line 126 of file hw_dr_uart_driver_h\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for UART Terminal from the source code\&.
